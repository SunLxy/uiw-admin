{"version":3,"file":"529.js","mappings":"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","sources":["webpack://@examples/base/./src/pages/Demo/Detail/index.tsx","webpack://@examples/base/./src/pages/Demo/Detail/items.tsx","webpack://@examples/base/./src/pages/Demo/index.tsx","webpack://@examples/base/./src/servers/demo.ts"],"sourcesContent":["import React from 'react';\nimport { ProDrawer, ProForm } from '@uiw-admin/components'\nimport { Notify } from 'uiw'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, Dispatch } from '@uiw-admin/models';\nimport { insert, update } from '../../../servers/demo'\nimport { items } from './items'\nimport useSWR from 'swr'\n\ninterface DetailProps {\n  updateData?: any\n}\n\nconst Detail = (props: DetailProps) => {\n  const { updateData } = props\n  const dispatch = useDispatch<Dispatch>();\n  const { demo: { drawerVisible, tableType, queryInfo, isView } } = useSelector((state: RootState) => state);\n\n  const onClose = () => dispatch({ type: \"demo/clean\" })\n\n  const { mutate } = useSWR([\n    (tableType === 'add' && insert) || (tableType === 'edit' && update), { method: \"POST\", body: queryInfo }], {\n    revalidateOnMount: false,\n    revalidateOnFocus: false,\n    onSuccess: (data) => {\n      if (data && data.code === 200) {\n        Notify.success({ title: data.message });\n        onClose()\n      }\n    },\n  })\n\n  const dataSource: any = items(queryInfo, { isView })\n  \n  return (\n    <ProDrawer\n      width={800}\n      title={tableType === 'add' ? '新增' : tableType === 'edit' ? '编辑' : '查看'}\n      visible={drawerVisible}\n      onClose={onClose}\n      buttons={[\n        {\n          label: \"保存\",\n          onPress: () => mutate(),\n          width: 80,\n          show: !isView,\n        },\n        {\n          label: \"取消\",\n          type: \"dark\",\n          onPress: onClose\n        }\n      ]}\n    >\n      <ProForm\n        title=\"基础信息\"\n        onChange={(initial: any, current: any) => updateData({ queryInfo: { ...queryInfo, ...current } })}\n        formDatas={dataSource}\n      />\n    </ProDrawer>\n  )\n}\n\nexport default Detail","export const items = (queryInfo: any, { isView }: { isView: boolean }) => [\n  {\n    label: '姓氏',\n    key: 'firstName',\n    widget: 'input',\n    initialValue: queryInfo?.firstName,\n    widgetProps: { disabled: isView }\n  },\n  {\n    label: '名字',\n    key: 'lastName',\n    widget: 'input',\n    initialValue: queryInfo?.lastName,\n    widgetProps: { disabled: isView }\n  },\n  {\n    label: '邮箱',\n    key: 'email',\n    widget: 'input',\n    initialValue: queryInfo?.email,\n    widgetProps: { disabled: isView }\n  },\n  {\n    label: '水果',\n    key: 'select',\n    widget: 'select',\n    option: [\n      { value: 1, label: '苹果' },\n      { value: 2, label: '西瓜' },\n      { value: 3, label: '香蕉' },\n      { value: 4, label: '东北大冻梨' },\n    ],\n    initialValue: queryInfo?.select,\n    widgetProps: { disabled: isView }\n  }\n]","import React from 'react';\nimport { Button } from 'uiw'\nimport { useDispatch } from 'react-redux';\nimport { Dispatch } from '@uiw-admin/models';\nimport { ProTable, useTable } from '@uiw-admin/components';\nimport { selectPage } from '@/servers/demo'\nimport Detail from './Detail'\n\nconst Demo = () => {\n  const dispatch = useDispatch<Dispatch>();\n\n  const updateData = (payload: any) => {\n    dispatch({\n      type: 'demo/updateState',\n      payload,\n    });\n  };\n\n  const table = useTable(selectPage, {\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\n    formatData: (data: any) => {\n      return {\n        total: data.data.total,\n        data: data.data.rows || [],\n      };\n    },\n    // 格式化查询参数 会接收到pageIndex 当前页  pageSize 页码\n    query: (pageIndex: number) => {\n      console.log(pageIndex);\n      return {\n        page: pageIndex,\n        pageSize: 10,\n      };\n    },\n  });\n\n  // 操作\n  function handleEditTable(type: string, record: any) {\n    updateData({\n      isView: type === 'view',\n      tableType: type\n    })\n    if (type === 'add') {\n      updateData({ drawerVisible: true, queryInfo: {} })\n    }\n    if (type === 'edit' || type === 'view') {\n      dispatch({\n        type: 'demo/selectById',\n        payload: { id: record?.id }\n      });\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <ProTable\n        btns={[\n          {\n            label: '新增',\n            type: 'primary',\n            onClick: handleEditTable.bind(this, 'add')\n          },\n          {\n            label: '导出',\n            type: \"danger\",\n            onClick: handleEditTable.bind(this, 'export')\n          },\n          {\n            label: '导入',\n            type: \"dark\",\n            onClick: handleEditTable.bind(this, 'import')\n          },\n        ]}\n        columns={[\n          {\n            title: '姓名',\n            key: 'name',\n            props: {\n              widget: 'input',\n              initialValue: 'zzz',\n              // 组件属性\n              widgetProps: {\n                preIcon: 'user',\n                placeholder: '输入用户名'\n              }\n            },\n          },\n          {\n            title: '年龄',\n            key: 'age',\n            props: {\n              widget: 'select',\n              option: [\n                { label: '20', value: 20 },\n                { label: '10', value: 10 },\n              ],\n            },\n          },\n          {\n            title: '地址',\n            key: 'info',\n          },\n          {\n            title: '操作',\n            key: 'edit',\n            width: 98,\n            render: (text: any, key: any, rowData: any) => (\n              <div>\n                <Button size=\"small\" type=\"danger\" onClick={handleEditTable.bind(this, 'edit', rowData)}>编辑</Button>\n                <Button size=\"small\" type=\"success\" onClick={handleEditTable.bind(this, 'view', rowData)}>查看</Button>\n              </div>\n            ),\n          },\n        ]}\n        table={table}\n      />\n      <Detail updateData={updateData} />\n    </React.Fragment>\n  );\n}\nexport default Demo","import { request } from '@uiw-admin/utils';\n\n// /api/demo/selectById\nfunction selectById(params: { id: string }) {\n  return request('/api/demo/selectById', {\n    method: 'POST',\n    body: { ...params },\n  });\n}\n\nconst update = '/api/demo/update'\n\nconst insert = '/api/demo/insert'\n\nconst selectPage = '/api/demo/selectPage'\n\nexport{\n  selectById,\n  update,\n  insert,\n  selectPage\n}"],"names":["props","updateData","dispatch","useDispatch","useSelector","state","demo","drawerVisible","tableType","queryInfo","isView","onClose","type","mutate","useSWR","insert","update","method","body","revalidateOnMount","revalidateOnFocus","onSuccess","data","code","Notify","title","message","dataSource","label","key","widget","initialValue","firstName","widgetProps","disabled","lastName","email","option","value","select","items","width","visible","buttons","onPress","show","onChange","initial","current","formDatas","payload","table","useTable","selectPage","formatData","total","rows","query","pageIndex","console","log","page","pageSize","handleEditTable","record","id","btns","onClick","bind","columns","preIcon","placeholder","render","text","rowData","size","selectById","params","request"],"sourceRoot":""}