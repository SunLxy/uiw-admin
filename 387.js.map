{"version":3,"file":"387.js","mappings":"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","sources":["webpack://@examples/base/../src/utils/isCheckBoxInput.ts","webpack://@examples/base/../src/utils/isDateObject.ts","webpack://@examples/base/../src/utils/isNullOrUndefined.ts","webpack://@examples/base/../src/utils/isObject.ts","webpack://@examples/base/../src/logic/getEventValue.ts","webpack://@examples/base/../src/logic/isNameInFieldArray.ts","webpack://@examples/base/../src/logic/getNodeParentName.ts","webpack://@examples/base/../src/utils/compact.ts","webpack://@examples/base/../src/utils/isUndefined.ts","webpack://@examples/base/../src/utils/get.ts","webpack://@examples/base/../src/constants.ts","webpack://@examples/base/../src/utils/omit.ts","webpack://@examples/base/../src/useFormContext.tsx","webpack://@examples/base/../src/logic/getProxyFormState.ts","webpack://@examples/base/../src/utils/isEmptyObject.ts","webpack://@examples/base/../src/logic/shouldRenderFormState.ts","webpack://@examples/base/../src/utils/convertToArrayPayload.ts","webpack://@examples/base/../src/logic/shouldSubscribeByName.ts","webpack://@examples/base/../src/useSubscribe.ts","webpack://@examples/base/../src/utils/isString.ts","webpack://@examples/base/../src/logic/generateWatchOutput.ts","webpack://@examples/base/../src/utils/isFunction.ts","webpack://@examples/base/../src/utils/objectHasFunction.ts","webpack://@examples/base/../src/useController.ts","webpack://@examples/base/../src/useWatch.ts","webpack://@examples/base/../src/useFormState.ts","webpack://@examples/base/../src/logic/appendErrors.ts","webpack://@examples/base/../src/utils/isKey.ts","webpack://@examples/base/../src/utils/stringToPath.ts","webpack://@examples/base/../src/utils/set.ts","webpack://@examples/base/../src/logic/focusFieldBy.ts","webpack://@examples/base/../src/logic/isWatched.ts","webpack://@examples/base/../src/utils/cloneObject.ts","webpack://@examples/base/../src/utils/createSubject.ts","webpack://@examples/base/../src/utils/isPrimitive.ts","webpack://@examples/base/../src/utils/deepEqual.ts","webpack://@examples/base/../src/utils/getValidationModes.ts","webpack://@examples/base/../src/utils/isBoolean.ts","webpack://@examples/base/../src/utils/isFileInput.ts","webpack://@examples/base/../src/utils/isHTMLElement.ts","webpack://@examples/base/../src/utils/isMultipleSelect.ts","webpack://@examples/base/../src/utils/isRadioInput.ts","webpack://@examples/base/../src/utils/isRadioOrCheckbox.ts","webpack://@examples/base/../src/utils/isWeb.ts","webpack://@examples/base/../src/utils/live.ts","webpack://@examples/base/../src/utils/unset.ts","webpack://@examples/base/../src/logic/getDirtyFields.ts","webpack://@examples/base/../src/logic/getCheckboxValue.ts","webpack://@examples/base/../src/logic/getFieldValueAs.ts","webpack://@examples/base/../src/logic/getRadioValue.ts","webpack://@examples/base/../src/logic/getFieldValue.ts","webpack://@examples/base/../src/logic/getResolverOptions.ts","webpack://@examples/base/../src/utils/isRegex.ts","webpack://@examples/base/../src/logic/getRuleValue.ts","webpack://@examples/base/../src/logic/hasValidation.ts","webpack://@examples/base/../src/logic/schemaErrorLookup.ts","webpack://@examples/base/../src/logic/skipValidation.ts","webpack://@examples/base/../src/logic/unsetEmptyArray.ts","webpack://@examples/base/../src/utils/isMessage.ts","webpack://@examples/base/../src/logic/getValidateError.ts","webpack://@examples/base/../src/logic/getValueAndMessage.ts","webpack://@examples/base/../src/logic/validateField.ts","webpack://@examples/base/../src/logic/createFormControl.ts","webpack://@examples/base/../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n\n  const _registerProps = React.useRef(\n    control.register(name, {\n      ...props.rules,\n      value,\n    }),\n  );\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      isArrayField\n        ? _shouldUnregisterField && !control._stateFlags.action\n        : _shouldUnregisterField\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(\n        (event) => {\n          _registerProps.current.onChange({\n            target: {\n              value: getEventValue(event),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.CHANGE,\n          });\n        },\n        [name],\n      ),\n      onBlur: React.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      }, [name, control]),\n      ref: React.useCallback(\n        (elm) => {\n          const field = get(control._fields, name);\n\n          if (elm && field && elm.focus) {\n            field._f.ref = {\n              focus: () => elm.focus(),\n              setCustomValidity: (message: string) =>\n                elm.setCustomValidity(message),\n              reportValidity: () => elm.reportValidity(),\n            };\n          }\n        },\n        [name, control],\n      ),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: get(formState.dirtyFields, name),\n      isTouched: get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n    [control, exact, defaultValue],\n  );\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback,\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (value) =>\n      _mounted.current &&\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    [control, exact],\n  );\n\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(\n    () => () => {\n      _mounted.current = false;\n    },\n    [],\n  );\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  _UseFormGetFieldState,\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && Array.isArray(get(_fields, name))) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (\n      _proxyFormState.errors &&\n      shouldSetFields &&\n      Array.isArray(get(_formState.errors, name))\n    ) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (\n      _proxyFormState.touchedFields &&\n      Array.isArray(get(_formState.touchedFields, name))\n    ) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n    }\n\n    if (_proxyFormState.dirtyFields) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName): any[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const _getFieldState: _UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: get((formState || _formState).dirtyFields, name),\n    isTouched: get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: refs.concat(fieldRef).filter(live),\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    _getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","useController","methods","control","shouldUnregister","isArrayField","isNameInFieldArray","array","_name","shouldSubscribeByName","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_subjects","_getWatch","_removeUnmounted","useWatch","_defaultValues","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_mounted","shouldRenderFormState","state","getProxyFormState","useFormState","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","onChange","getEventValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","isBlurEvent","has","watchName","slice","cloneObject","Set","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","isConnected","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","join","foundError","pop","isSubmitted","reValidateMode","getValidateError","isMessage","validationData","inputValue","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","live","getValues","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","isWatched","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","shouldFocus","_getFieldState","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","concat","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sourceRoot":""}