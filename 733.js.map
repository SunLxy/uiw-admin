{"version":3,"file":"733.js","mappings":"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","sources":["webpack://@examples/base/./src/pages/TableList/index.tsx","webpack://@examples/base/./src/queries/index.ts","webpack://@examples/base/../../packages/components/src/Skeleton/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/hooks.ts","webpack://@examples/base/../../packages/components/src/ProTable/BaseTable.tsx","webpack://@examples/base/../../packages/components/src/ProTable/widgets/Select.tsx","webpack://@examples/base/../../packages/components/src/ProTable/widgets/Radio.tsx","webpack://@examples/base/../../packages/components/src/ProTable/BaseForm.tsx","webpack://@examples/base/../../packages/components/src/ProTable/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/useTable.ts","webpack://@examples/base/../../packages/components/src/ProDrawer/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { ProTable, useTable } from '@uiw-admin/components';\nimport { useCity } from '../../queries'\n\nexport default function Demo() {\n  const table = useTable('/api/getData', {\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\n    formatData: (data) => {\n      return {\n        total: data.total,\n        data: data.data,\n      };\n    },\n    // 格式化查询参数 会接收到pageIndex 当前页  searchValues 表单数据\n    query: (pageIndex, searchValues) => {\n      return {\n        page: pageIndex,\n        pageSize: 10,\n        data: searchValues,\n      };\n    },\n  });\n\n  const [val, setVal] = useState('')\n\n  const { city = [], isLoading } = useCity(val)\n\n  const handleSearch = (val: string) => {\n    setVal(val)\n\n  }\n\n\n  return (\n    <ProTable\n      btns={[{ label: '新增', type: 'primary'}, { label: '重置',  onClick: table.onSearch }]}\n      table={table}\n      columns={[\n        {\n          title: '名字',\n          key: 'name',\n          props: {\n            widget: 'input',\n            initialValue: 'zzz',\n            // 组件属性\n            widgetProps: {\n              preIcon: 'user',\n              placeholder: '输入用户名',\n            },\n          },\n        },\n        {\n          title: '年龄',\n          key: 'age',\n          width: 50,\n          props: {\n            widget: 'select',\n            option: [\n              { label: '20', value: 20 },\n              { label: '10', value: 10 },\n            ],\n          },\n        },\n        {\n          title: '地址',\n          key: 'info',\n          props: {\n            label: '详细地址',\n            key: 'detailAddress',\n            widget: 'textarea',\n          },\n        },\n        {\n          title: 'Switch',\n          key: 'Switch',\n          props: {\n            widget: 'switch',\n          },\n        },\n        {\n          title: 'timePicker',\n          key: 'timePicker',\n          props: {\n            widget: 'timePicker',\n          },\n        },\n        {\n          title: 'timePicker',\n          key: 'timePicker1',\n          props: {\n            widget: 'timePicker',\n          },\n        },\n        {\n          title: 'MonthPicker',\n          key: 'MonthPicker',\n          props: {\n            widget: 'monthPicker',\n          },\n        },\n        {\n          title: 'DateInput',\n          key: 'DateInput',\n          props: {\n            widget: 'dateInput',\n          },\n        },\n        {\n          title: 'Radio',\n          key: 'Radio',\n          props: {\n            widget: 'radio',\n            option: [\n              { label: '男', value: 'man' },\n              { label: '女', value: 'girl' },\n            ],\n          },\n        },\n        {\n          title: '家乡',\n          key: 'city',\n          width: 50,\n          props: {  \n            widget: 'searchSelect',\n            widgetProps: {\n              allowClear: true,\n              placeholder: \"请输入选择\",\n              showSearch: true,\n              loading: isLoading,\n              option: city,\n              onSearch: handleSearch,\n\n            },\n          },\n        },\n      ]}\n    />\n  );\n}\n","import useSWR from \"swr\";\n\n// 公共接口数据 重复数据hooks 都建在此文件夹\n// https://swr.vercel.app/zh-CN/docs/getting-started#%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6\n\n\n// 模糊获取城市接口\nfunction useCity(val: string) {\n  const { data, error } = useSWR(`/api/city/?val=${val}`)\n\n  return {\n    city: data?.data,\n    isLoading: !error && !data,\n    isError: error,\n  }\n}\n\n\nexport {\n  useCity\n}","import React from 'react';\nimport { Loader } from 'uiw';\n\ninterface SkeletonProps {\n  children: React.ReactNode;\n  loading?: boolean;\n}\n\nconst Skeleton: React.FC<SkeletonProps> = ({ children, loading = false }) => {\n  return (\n    <Loader\n      loading={loading}\n      style={{ display: 'block', }}\n      // fullscreen={true}\n      bgColor=\"rgba(255, 255, 255, 0.4)\"\n    >\n      <>{children}</>\n    </Loader>\n  );\n};\n\nexport default Skeleton;\n","import {\n  useContext,\n  createContext,\n} from 'react';\n\nexport const StoreCtx = createContext({});\n\n\nexport const useStore = () => {\n  return useContext(StoreCtx);\n};\n\n\n\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  useMemo,\n} from 'react';\nimport useSWR from 'swr';\nimport { Table, Pagination, TableColumns } from 'uiw';\nimport { request } from '@uiw-admin/utils';\nimport { useStore } from './hooks';\nimport { Fields } from './types';\n\ninterface BaseTableProps {\n  style?: React.CSSProperties;\n  columns: TableColumns[];\n}\n\nconst BaseTable: React.FC<BaseTableProps> = ({ style, columns }) => {\n  const [pageIndex, setPageIndex] = useState(1);\n\n  const [prevData, setPrevData] = useState({\n    data: [],\n    total: 0,\n  });\n\n  const store = useStore();\n\n  let { formatData, updateStore, query, key, searchValues } = store as any;\n\n  // 表单默认值\n  const defaultValues = useMemo(() => {\n    const defaultSearchValues: Fields = {};\n    columns.forEach((col) => {\n      if (col?.props?.initialValue) {\n        const name = col.key || col.props.key;\n        defaultSearchValues[name] = col.props.initialValue;\n      }\n    });\n\n    return defaultSearchValues;\n  }, [JSON.stringify(columns)]);\n\n  // 是否首次调取数据\n  const isFirstMountRef = useRef(false);\n  // 格式化接口查询参数\n  const formatQuery = useCallback(() => {\n    if (query) {\n      return query(\n        pageIndex,\n        isFirstMountRef.current === false ? defaultValues : searchValues,\n      );\n    } else {\n      // 默认传参\n      return {\n        page: 1,\n        pageSize: 10,\n      };\n    }\n  }, [pageIndex, JSON.stringify(defaultValues), JSON.stringify(searchValues)]);\n\n  const pageSize = formatQuery().pageSize || 10;\n\n  const { data, isValidating } = useSWR(\n    [key, { method: 'POST', body: formatQuery() }],\n    request,\n    {\n      // revalidateOnMount: false,\n      revalidateOnFocus: false,\n    },\n  );\n\n  // 查询\n  const onSearch = useCallback(async () => {\n    setPageIndex(1);\n  }, []);\n  // 分页\n  const onPageChange = useCallback((page) => {\n    setPageIndex(page);\n  }, []);\n\n  useEffect(() => {\n    // 获取表单默认值\n    const defaultSearchValues: Fields = {};\n    columns.forEach((col) => {\n      if (col?.props?.initialValue) {\n        const name = col.key || col.props.key;\n        defaultSearchValues[name] = col.props.initialValue;\n      }\n    });\n    const stores: any = {\n      data: data?.data,\n      total: data?.total,\n      loading: !data || isValidating,\n      onSearch,\n    };\n\n    if (!isFirstMountRef.current) {\n      isFirstMountRef.current = true;\n      // 默认表单值\n\n      stores.searchValues = defaultSearchValues;\n    }\n\n    updateStore(stores);\n\n    // 上一次请求数据\n    if (data) {\n      setPrevData(data);\n    }\n  }, [JSON.stringify(data), isValidating, onSearch, JSON.stringify(columns)]);\n\n  return (\n    <Table\n      columns={columns}\n      data={\n        formatData && data\n          ? formatData(data).data\n          : data?.data || prevData?.data\n      }\n      // style={{overflowX: 'scroll'}}\n      footer={\n        <Pagination\n          current={pageIndex}\n          pageSize={pageSize}\n          total={\n            formatData && data\n              ? formatData(data).total\n              : data?.total || prevData?.total\n          }\n          divider\n          onChange={(page) => {\n            onPageChange(page);\n          }}\n        />\n      }\n    />\n  );\n};\n\nexport default BaseTable;\n","import React from 'react';\nimport { Select } from 'uiw';\n\ninterface FormSelectProps {\n  option?: HTMLOptionElement[];\n}\n\nconst FormSelect: React.FC<FormSelectProps> = ({ option, ...others }) => {\n  return (\n    <Select {...others}>\n      <Select.Option value=\"\">请选择</Select.Option>\n      {option &&\n        option.map((opt) => (\n          <Select.Option key={opt.value} value={opt.value}>\n            {opt.label}\n          </Select.Option>\n        ))}\n    </Select>\n  );\n};\n\nexport default FormSelect;\n","import React from 'react';\nimport {Radio, RadioGroup } from 'uiw';\n\ninterface FormSelectProps {\n  option?: HTMLOptionElement[];\n}\n\nconst FormRadio: React.FC<FormSelectProps> = ({ option, ...others }) => {\n  return (\n    <RadioGroup {...others}>\n      {option &&\n        option.map((opt) => (\n          <Radio key={opt.value} value={opt.value}>\n            {opt.label}\n          </Radio>\n        ))}\n    </RadioGroup>\n  );\n};\n\nexport default FormRadio;\n","import React, { useMemo } from 'react';\nimport {\n  Button,\n  Input,\n  Form,\n  Row,\n  Col,\n  Checkbox,\n  Switch,\n  Textarea,\n  DateInput,\n  TimePicker,\n  MonthPicker,\n  FormSubmitProps,\n  SearchSelect,\n} from 'uiw';\nimport Select from './widgets/Select';\nimport FormRadio from './widgets/Radio';\nimport { useStore } from './hooks';\nimport { BaseFormProps, Fields } from './types'\n\n\nconst widgets = {\n  input: Input,\n  radio: FormRadio,\n  checkbox: Checkbox,\n  switch: Switch,\n  select: Select,\n  searchSelect: SearchSelect,\n  textarea: Textarea,\n  dateInput: DateInput,\n  timePicker: TimePicker,\n  monthPicker: MonthPicker,\n};\n\nconst BaseForm: React.FC<BaseFormProps> = (props) => {\n  const store = useStore();\n\n  let { updateStore, reset, onSearch } = store as any;\n\n  const { columns } = props;\n  // 获取表单配置\n  const getFormFields = useMemo(() => {\n    const fields: Fields = {};\n    columns.forEach((col) => {\n      if (col.props && Object.keys(col.props).length > 0) {\n        const { widgetProps, key, widget, label, initialValue, ...otherProps } =\n          col.props;\n        const name = key || col.key;\n        const Widget = widgets[widget];\n        fields[name] = {\n          label: label || col.title,\n          children: <Widget {...widgetProps} />,\n          ...otherProps,\n          initialValue,\n        };\n      }\n    });\n\n    return fields;\n  }, [JSON.stringify(columns)]);\n\n  // 查询\n  const onFormSearch = ({ initial, current }: FormSubmitProps) => {\n    updateStore({\n      searchValues: {\n        ...initial,\n        ...current,\n      },\n    });\n    onSearch(current);\n  };\n\n  // 重置\n\n  // const onReset = (resetForm: () => void) => {\n  //   resetForm();\n  // };\n  const itemsLength = Object.keys(getFormFields).length;\n  const emptyLength = 4 - itemsLength % 5\n  return (\n    <Form\n      style={{ background: '#fff', paddingBottom: 10, marginBottom: 14 }}\n      resetOnSubmit={false}\n      onSubmit={({ initial, current }) => {\n        onFormSearch({ initial, current });\n      }}\n      onSubmitError={(error) => {\n        if (error.filed) {\n          return { ...error.filed };\n        }\n        return null;\n      }}\n      fields={getFormFields}\n    >\n      {({ fields, state, canSubmit, resetForm }) => {\n        return (\n          <div>\n            <Row gutter={12}>\n              {Object.keys(fields).map((key) => (\n                <Col key={key} fixed style={{ width: '20%' }}>\n                  {fields[key]}\n                </Col>\n              ))}\n              {Array(emptyLength).fill('').map((value, index) => (\n                <Col key={index} fixed style={{ width: '20%' }} />\n              ))}\n              <Col align=\"middle\">\n                <Button type=\"primary\" htmlType=\"submit\">\n                  查询\n                </Button>\n                {/* <Button type=\"warning\" onClick={() => onReset(resetForm)}>\n           重置表单\n         </Button> */}\n              </Col>\n            </Row>\n          </div>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default BaseForm;\n","import React, { useState, useMemo } from 'react';\nimport { Button, Input, Form, ButtonProps, Row, Col, TableColumns } from 'uiw';\nimport Skeleton from '../Skeleton';\nimport Table from './BaseTable';\nimport BaseForm from './BaseForm';\nimport { StoreCtx } from './hooks';\nimport { ProtableProps } from './types'\n\n// interface BtnItem extends ButtonProps{\n//   label: React.ReactNode;\n// };\n\nconst ProTabel: React.FC<ProtableProps> = ({ table, columns, btns = [] }) => {\n  const {\n    key,\n    data,\n    reset,\n    refersh,\n    updateStore,\n    formatData,\n    query,\n    searchValues,\n    loading,\n    onSearch,\n  } = table;\n\n  const store = useMemo(\n    () => ({\n      data: [],\n      reset,\n      refersh,\n      key,\n      updateStore,\n      formatData,\n      query,\n      searchValues,\n      onSearch,\n    }),\n    [\n      JSON.stringify(data),\n      reset,\n      refersh,\n      key,\n      updateStore,\n      formatData,\n      query,\n      JSON.stringify(searchValues),\n      onSearch,\n    ],\n  );\n\n  return (\n    <StoreCtx.Provider value={store}>\n      <Skeleton loading={loading}>\n        {/* 表单查询区域 */}\n        <BaseForm columns={columns} />\n        {/* 操作区域 */}\n        {btns.length > 0 && (\n          <div style={{  background: '#fff', padding: 10 }}>\n            {btns.map((btn: any, idx) => (\n              <Button key={idx.toString()} style={{ marginRight: 5 }} {...btn}>\n                {btn.label}\n              </Button>\n            ))}\n          </div>\n        )}\n\n        {/* 列表组件 */}\n        <Table columns={columns} />\n      </Skeleton>\n    </StoreCtx.Provider>\n  );\n};\n\nexport default ProTabel;\n","import { useState } from 'react'\nimport { Params, useTableData, stateParams } from './types'\n\n\nconst useTable = (key: string, params: Params = {}): useTableData => {\n\n  const { formatData, query } = params\n\n\n  const [state, setState] = useState<any>({\n     // 总页数\n    total: 1,\n    // 当前table数据源\n    data: [],\n    // 选中的行\n    selectChecked: [],\n    selectCheckedRows: [],\n    // 表单值\n    searchValues: {},\n    // 加载状态\n    loading: false,\n  });\n  // 更新store\n  const updateStore = (datas: stateParams) => {\n    setState({\n      ...state,\n      ...datas,\n    })\n  }\n\n  // 重置\n  const reset = () => {\n\n  }\n  // 刷新当前页数据\n  const refersh = () => {\n\n  }\n  // 点击查询\n  const onSearch = () => {\n\n  }\n\n  return {\n    key,\n    // 重置\n    reset,\n    // 刷新当前页数据\n    refersh,\n    // 点击查询\n    onSearch,\n    formatData,\n    query,\n    updateStore,\n    ...state,\n  }\n}\n\n\nexport default useTable","import React, { memo } from 'react';\nimport { Drawer, Button, DrawerProps, Row, Col } from 'uiw';\n\n/**\n * ProDrawer 组件继承于https://uiwjs.github.io/#/components/drawer\n * @param {boolean} visible 显示隐藏\n * @param {string} title 标题\n * @param {()=>void} onClose 关闭事件\n * @param {number} width Drawer宽\n * @param {Array<{label?:string,onPress?:()=>void,show?:boolean,loading?:boolean}>} buttons 按钮集合(label:\"文本\",onPress:点击事件,show:是否展示)\n * @param {React.ReactNode} children\n * @returns\n */\n\ninterface ButtonItemsProps {\n  label?: string;\n  onPress?: () => void;\n  show?: boolean;\n  size?: 'large' | 'default' | 'small';\n  type?: 'primary' | 'success' | 'warning' | 'danger' | 'light' | 'dark' | 'link';\n  loading?: boolean;\n  width?: number\n}\n\ninterface ProDrawerProps extends DrawerProps {\n  visible: boolean;\n  title?: string;\n  onClose?: any;\n  width?: number;\n  buttons?: Array<ButtonItemsProps>;\n  children?: React.ReactNode\n}\nfunction ProDrawer(props: ProDrawerProps) {\n  const { visible, title = '', onClose = null, width = 800, buttons = [], children, ...others } = props\n  return (\n    <Drawer\n      title={title}\n      isOpen={visible}\n      onClose={onClose && onClose}\n      size={width}\n      bodyStyle={{ padding: '0 10px 45px 10px' }}\n      {...others}\n      footer={\n        buttons.map(\n          ({ label = '', onPress, show = true, loading, type = \"primary\", width = 60, size = \"default\" }, idx) =>\n            show && (\n              <Button\n                style={{ width: width }}\n                key={idx}\n                type={type}\n                size={size}\n                onClick={onPress && onPress}\n                loading={loading}\n              >\n                {label}\n              </Button>\n            )\n        )\n      }\n    >\n      {children}\n    </Drawer>\n  );\n}\n\nexport default memo(ProDrawer);\n"],"names":["Demo","table","useTable","formatData","data","total","query","pageIndex","searchValues","page","pageSize","useState","val","setVal","useSWR","error","city","isLoading","isError","useCity","btns","label","type","onClick","onSearch","columns","title","key","props","widget","initialValue","widgetProps","preIcon","placeholder","width","option","value","allowClear","showSearch","loading","style","display","bgColor","children","StoreCtx","createContext","useStore","useContext","store","defaultValues","useMemo","defaultSearchValues","col","name","JSON","isFirstMountRef","useRef","formatQuery","useCallback","method","body","revalidateOnFocus","isValidating","setPageIndex","onPageChange","useEffect","stores","updateStore","setPrevData","prevData","footer","current","divider","onChange","others","opt","widgets","input","radio","checkbox","switch","select","searchSelect","textarea","dateInput","timePicker","monthPicker","MonthPicker","getFormFields","fields","Object","Widget","emptyLength","background","paddingBottom","marginBottom","resetOnSubmit","onSubmit","onFormSearch","initial","onSubmitError","resetForm","gutter","fixed","Array","align","htmlType","reset","refersh","Provider","padding","marginRight","btn","idx","params","selectChecked","selectCheckedRows","datas","setState","ProDrawer","onClose","buttons","isOpen","size","bodyStyle","show","onPress","memo"],"sourceRoot":""}