{"version":3,"file":"514.js","mappings":"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","sources":["webpack://@examples/base/./src/pages/Demo/Detail/index.tsx","webpack://@examples/base/./src/pages/Demo/index.tsx","webpack://@examples/base/./src/servers/demo.ts","webpack://@examples/base/../../packages/components/src/Skeleton/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/hooks.ts","webpack://@examples/base/../../packages/components/src/ProTable/BaseTable.tsx","webpack://@examples/base/../../packages/components/src/ProTable/widgets/Select.tsx","webpack://@examples/base/../../packages/components/src/ProTable/BaseForm.tsx","webpack://@examples/base/../../packages/components/src/ProTable/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/useTable.ts","webpack://@examples/base/../../packages/components/src/ProDrawer/index.tsx"],"sourcesContent":["import React from 'react';\nimport { ProDrawer } from '@uiw-admin/components'\nimport { Form, Input, Select, Row, Col, Button, Notify } from 'uiw'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, Dispatch } from '@uiw-admin/models';\nimport { insert, update } from 'servers/demo'\nimport useSWR from 'swr'\n\ninterface DetailProps {\n  updateData?: any\n}\n\nconst options = [\n  { value: 1, label: '苹果' },\n  { value: 2, label: '西瓜' },\n  { value: 3, label: '香蕉' },\n  { value: 4, label: '东北大冻梨' },\n]\n\nconst Detail = (props: DetailProps) => {\n  const { updateData } = props\n  const dispatch = useDispatch<Dispatch>();\n  const { demo: { drawerVisible, tableType, queryInfo, isView } } = useSelector((state: RootState) => state);\n\n  const onClose = () => dispatch({ type: \"demo/clean\" })\n\n  const { mutate } = useSWR([\n    (tableType === 'add' && insert) || (tableType === 'edit' && update), { method: \"POST\", body: queryInfo }], {\n    revalidateOnMount: false,\n    revalidateOnFocus: false,\n    onSuccess: (data) => {\n      if (data && data.code === 200) {\n        Notify.success({ title: data.message });\n        onClose()\n      }\n    },\n  })\n\n  return (\n    <ProDrawer\n      width={800}\n      title={tableType === 'add' ? '新增' : tableType === 'edit' ? '编辑' : '查看'}\n      visible={drawerVisible}\n      onClose={onClose}\n    >\n      <Form\n        title=\"基础信息\"\n        onSubmit={({ initial, current }) => mutate()}\n        onChange={({ initial, current }) => updateData({ queryInfo: { ...queryInfo, current } })}\n        fields={{\n          firstName: {\n            labelClassName: 'fieldLabel',\n            labelStyle: { width: 60 },\n            inline: true,\n            label: '姓氏',\n            initialValue: queryInfo?.firstName,\n            children: <Input disabled={isView} />\n          },\n          lastName: {\n            labelClassName: 'fieldLabel',\n            labelStyle: { width: 60 },\n            initialValue: queryInfo?.lastName,\n            inline: true,\n            label: '名字',\n            children: <Input disabled={isView} />\n          },\n          email: {\n            labelClassName: 'fieldLabel',\n            labelStyle: { width: 60 },\n            validator: (currentValue) => {\n              return currentValue && currentValue.length < 2 ? 'Password must be 8+ characters' : null;\n            },\n            initialValue: queryInfo?.email,\n            inline: true,\n            label: 'Email',\n            children: <Input disabled={isView} />\n          },\n          select: {\n            labelClassName: 'fieldLabel',\n            labelStyle: { width: 60 },\n            initialValue: queryInfo?.select,\n            inline: true,\n            label: '选择器',\n            children: (\n              <Select disabled={isView}>\n                <Select.Option>请选择</Select.Option>\n                {options.map(({ label, value }) => <Select.Option value={value} key={value}>{label}</Select.Option>)}\n              </Select>\n            ),\n          },\n        }}\n      >\n        {({ fields, state, canSubmit }) => {\n          return (\n            <div>\n              <Row gutter={10} style={{ marginBottom: 10 }}>\n                <Col>{fields.firstName}</Col>\n                <Col>{fields.lastName}</Col>\n                <Col>{fields.email}</Col>\n              </Row>\n              <Row gutter={10}>\n                <Col>{fields.select}</Col>\n              </Row>\n              {!isView && (\n                <Row gutter={10}>\n                  <Col />\n                  <Col fixed align=\"bottom\"><Button disabled={!canSubmit()} type=\"primary\" htmlType=\"submit\">提交</Button></Col>\n                </Row>\n              )}\n            </div>\n          )\n        }}\n      </Form>\n    </ProDrawer>\n  )\n}\n\nexport default Detail","import React from 'react';\nimport { Button } from 'uiw'\nimport { useDispatch } from 'react-redux';\nimport { Dispatch } from '@uiw-admin/models';\nimport { ProTable, useTable } from '@uiw-admin/components';\nimport { selectPage } from 'servers/demo'\nimport Detail from './Detail'\n\nconst Demo = () => {\n  const dispatch = useDispatch<Dispatch>();\n\n  const updateData = (payload: any) => {\n    dispatch({\n      type: 'demo/updateState',\n      payload,\n    });\n  };\n\n  const table = useTable(selectPage, {\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\n    formatData: (data: any) => {\n      return {\n        total: data.data.total,\n        data: data.data.rows || [],\n      };\n    },\n    // 格式化查询参数 会接收到pageIndex 当前页  pageSize 页码\n    query: (pageIndex: number) => {\n      console.log(pageIndex);\n      return {\n        page: pageIndex,\n        pageSize: 10,\n      };\n    },\n  });\n\n  // 操作\n  function handleEditTable(type: string, record: any) {\n    updateData({\n      isView: type === 'view',\n      tableType: type\n    })\n    if (type === 'add') {\n      updateData({ drawerVisible: true, queryInfo: {} })\n    }\n    if (type === 'edit' || type === 'view') {\n      dispatch({\n        type: 'demo/selectById',\n        payload: { id: record?.id }\n      });\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <ProTable\n        btns={[\n          {\n            label: '新增',\n            type: 'primary',\n            onClick: handleEditTable.bind(this, 'add')\n          },\n          {\n            label: '导出',\n            type: \"danger\",\n            onClick: handleEditTable.bind(this, 'export')\n          },\n          {\n            label: '导入',\n            type: \"dark\",\n            onClick: handleEditTable.bind(this, 'import')\n          },\n        ]}\n        columns={[\n          {\n            title: '姓名',\n            key: 'name',\n            props: {\n              widget: 'input',\n              initialValue: 'zzz',\n              // 组件属性\n              widgetProps: {\n                preIcon: 'user',\n                placeholder: '输入用户名'\n              }\n            },\n          },\n          {\n            title: '年龄',\n            key: 'age',\n            props: {\n              widget: 'select',\n              option: [\n                { label: '20', value: 20 },\n                { label: '10', value: 10 },\n              ],\n            },\n          },\n          {\n            title: '地址',\n            key: 'info',\n          },\n          {\n            title: '操作',\n            key: 'edit',\n            width: 98,\n            render: (text: any, key: any, rowData: any) => (\n              <div>\n                <Button size=\"small\" type=\"danger\" onClick={handleEditTable.bind(this, 'edit',rowData)}>编辑</Button>\n                <Button size=\"small\" type=\"success\" onClick={handleEditTable.bind(this, 'view',rowData)}>查看</Button>\n              </div>\n            ),\n          },\n        ]}\n        table={table}\n      />\n      <Detail updateData={updateData} />\n    </React.Fragment>\n  );\n}\nexport default Demo","import { request } from '@uiw-admin/utils';\n\n// /api/demo/selectById\nfunction selectById(params: { id: string }) {\n  return request('/api/demo/selectById', {\n    method: 'POST',\n    body: { ...params },\n  });\n}\n\nconst update = '/api/demo/update'\n\nconst insert = '/api/demo/insert'\n\nconst selectPage = '/api/demo/selectPage'\n\nexport{\n  selectById,\n  update,\n  insert,\n  selectPage\n}","import React from 'react';\nimport { Loader } from 'uiw';\n\ninterface SkeletonProps {\n  children: React.ReactNode;\n  loading?: boolean;\n}\n\nconst Skeleton: React.FC<SkeletonProps> = ({ children, loading = false }) => {\n  return (\n    <Loader\n      loading={loading}\n      style={{ display: 'block', }}\n      // fullscreen={true}\n      bgColor=\"rgba(255, 255, 255, 0.4)\"\n    >\n      <>{children}</>\n    </Loader>\n  );\n};\n\nexport default Skeleton;\n","import {\n  useContext,\n  createContext,\n} from 'react';\n\nexport const StoreCtx = createContext({});\n\n\nexport const useStore = () => {\n  return useContext(StoreCtx);\n};\n\n\n\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport useSWR from 'swr';\nimport { Table, Pagination, TableColumns, Button } from 'uiw';\nimport { request } from '@uiw-admin/utils';\nimport { useStore } from './hooks';\nimport { Fields } from './BaseForm';\n\ninterface BaseTableProps {\n  style?: React.CSSProperties;\n  columns: TableColumns[];\n}\n\nconst BaseTable: React.FC<BaseTableProps> = ({ style, columns }) => {\n  const [pageIndex, setPageIndex] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  const store = useStore();\n\n  let { formatData, updateStore, query, key, searchValues } = store as any;\n\n  // 是否首次调取数据\n  const isFirstMountRef = useRef(false);\n  // 格式化接口查询参数\n  const formatQuery = (defaultSearchValues?: Fields, page?:number) => {\n    if (query) {\n      return query(page || pageIndex, defaultSearchValues || searchValues);\n    } else {\n      // 默认传参\n      return {\n        page: page || pageIndex,\n        pageSize: 10,\n      };\n    }\n  };\n\n  const pageSize = formatQuery().pageSize || 10;\n\n\n  const { data, error, mutate, isValidating } = useSWR(\n    [key, { method: 'POST', body: formatQuery() }],\n    request,\n    {\n      revalidateOnMount: false,\n      revalidateOnFocus: false,\n    },\n  );\n  // 分页查询\n  const onSearch = useCallback(async (current) => {\n    setLoading(true)\n    setPageIndex(1)\n    await request(key, { method: 'POST', body: formatQuery(current, 1) }).then(res => {\n      setLoading(false)\n      mutate(res, false);\n      console.log(123);\n     \n    });\n  }, [request, mutate, JSON.stringify(searchValues)]);\n\n  const onPageChange = useCallback(async (page) => {\n    setLoading(true)\n    setPageIndex(page)\n    request(key, { method: 'POST', body: formatQuery(undefined, page) }).then(res => {\n      setLoading(false)\n      mutate(res, false);\n     \n    });\n  }, [request, mutate, JSON.stringify(searchValues), pageIndex]);\n\n\n  useEffect(() => {\n    // 获取表单默认值\n    const defaultSearchValues: Fields = {};\n    columns.forEach((col) => {\n      if (col?.props?.initialValue) {\n        const name = col.key || col.props.key;\n        defaultSearchValues[name] = col.props.initialValue;\n      }\n    });\n    updateStore({\n      data: data?.data,\n      total: data?.total,\n      loading: loading,\n      onSearch\n    });\n\n    if (!isFirstMountRef.current) {\n      isFirstMountRef.current = true;\n      updateStore({\n        searchValues: defaultSearchValues,\n      });\n      setLoading(true)\n      // 第一次加载\n      request(key, {\n        method: 'POST',\n        body: formatQuery(defaultSearchValues),\n      }).then((res) => {\n        setLoading(false)\n        mutate(res, false);\n      });\n    }\n  }, [JSON.stringify(data), onSearch, loading, JSON.stringify(columns)]);\n\n  return (\n    <Table\n      columns={columns}\n      data={formatData && data ? formatData(data).data : data?.data}\n      style={style}\n      footer={\n        <Pagination\n          current={pageIndex}\n          pageSize={pageSize}\n          total={formatData && data ? formatData(data).total : data?.total}\n          divider\n          onChange={(page) => {\n            \n            onPageChange(page)\n          }}\n        />\n      }\n    />\n  );\n};\n\nexport default BaseTable;\n","import React from 'react';\nimport { Select } from 'uiw';\n\ninterface FormSelectProps {\n  option?: HTMLOptionElement[];\n}\n\nconst FormSelect: React.FC<FormSelectProps> = ({ option }) => {\n  return (\n    <Select>\n      <Select.Option value=\"\">请选择</Select.Option>\n      {option &&\n        option.map((opt) => (\n          <Select.Option key={opt.value} value={opt.value}>\n            {opt.label}\n          </Select.Option>\n        ))}\n    </Select>\n  );\n};\n\nexport default FormSelect;\n","import React, { useEffect } from 'react';\nimport {\n  Button,\n  Input,\n  Form,\n  Row,\n  Col,\n  Radio,\n  Checkbox,\n  Switch,\n  SearchSelect,\n  Textarea,\n  DateInput,\n  TimePicker,\n  MonthPicker,\n  FormSubmitProps,\n} from 'uiw';\nimport { FormCol } from './index';\nimport Select from './widgets/Select';\nimport { useStore } from './hooks';\n\ninterface BaseFormProps {\n  columns: FormCol[];\n}\n\nexport type Fields = {\n  [key: string]: any;\n};\n\nconst widgets = {\n  input: Input,\n  radio: Radio,\n  checkbox: Checkbox,\n  switch: Switch,\n  select: Select,\n  // searchSelect: SearchSelect,\n  textarea: Textarea,\n  dateInput: DateInput,\n  timePicker: TimePicker,\n  monthPicker: MonthPicker,\n};\n\nconst BaseForm: React.FC<BaseFormProps> = (props) => {\n  const store = useStore();\n\n  let { updateStore, reset, onSearch } = store as any;\n\n  const { columns } = props;\n  // 获取表单配置\n  const getFormFields = () => {\n    const fields: Fields = {};\n    columns.forEach((col) => {\n      if (col.props && Object.keys(col.props).length > 0) {\n        const { widgetProps, key, widget, label, initialValue, ...otherProps } =\n          col.props;\n        const name = col.key || key;\n        const Widget = widgets[widget];\n        fields[name] = {\n          label: col.title || label,\n          children: <Widget {...widgetProps} />,\n          ...otherProps,\n          initialValue,\n        };\n      }\n    });\n\n    return fields;\n  };\n\n  // 处理更新默认值\n\n  useEffect(() => {\n    updateStore({\n      searchValues: { ...getFormFields().defaultValues },\n    });\n  }, [JSON.stringify(getFormFields().defaultValues)]);\n\n  // 查询\n  const onFormSearch = ({ initial, current }: FormSubmitProps) => {\n    updateStore({\n      searchValues: {\n        ...initial,\n        ...current,\n      },\n    });\n    onSearch(current);\n  };\n\n  // 重置\n\n  const onReset = (resetForm: () => void) => {\n    resetForm();\n  };\n\n  return (\n    <Form\n      style={{ background: '#fff', paddingBottom: 5 }}\n      resetOnSubmit={false}\n      onSubmit={({ initial, current }) => {\n        onFormSearch({ initial, current });\n      }}\n      onSubmitError={(error) => {\n        if (error.filed) {\n          return { ...error.filed };\n        }\n        return null;\n      }}\n      fields={getFormFields()}\n    >\n      {({ fields, state, canSubmit, resetForm }) => {\n        return (\n          <div>\n            <Row gutter={10}>\n              {Object.keys(fields).map((key) => (\n                <Col key={key} fixed>\n                  {fields[key]}\n                </Col>\n              ))}\n\n              <Col style={{ marginTop: 31 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  查询\n                </Button>\n                {/* <Button type=\"warning\" onClick={() => onReset(resetForm)}>\n                  重置表单\n                </Button> */}\n              </Col>\n            </Row>\n          </div>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default BaseForm;\n","import React, { useState, useMemo } from 'react';\nimport { Button, Input, Form, ButtonProps, Row, Col, TableColumns } from 'uiw';\nimport Skeleton from '../Skeleton';\nimport Table from './BaseTable';\nimport BaseForm from './BaseForm';\nimport { StoreCtx } from './hooks';\nimport { useTableData } from './useTable';\n\n// interface BtnItem extends ButtonProps{\n//   label: React.ReactNode;\n// };\ninterface ProtableProps {\n  table: useTableData;\n  btns?: Array<ButtonProps>;\n  columns: FormCol[];\n}\n\nexport interface FormCol extends TableColumns {\n  props?: {\n    widget: 'input' | 'radio' | 'checkbox' | 'switch' | 'select' | 'textarea' | 'dateInput' | 'timePicker' | 'monthPicker',\n    [key: string]: any\n  }\n}\n\nconst ProTabel: React.FC<ProtableProps> = ({ table, columns, btns = [] }) => {\n\n  const { key, data, reset, refersh, updateStore, formatData, query, searchValues, loading, onSearch } = table;\n\n  const store = useMemo(\n    () => ({\n      data: [],\n      reset,\n      refersh,\n      key,\n      updateStore,\n      formatData,\n      query,\n      searchValues,\n      onSearch\n    }),\n    [JSON.stringify(data), reset, refersh, key, updateStore, formatData, query, JSON.stringify(searchValues), onSearch],\n  );\n\n\n  return (\n    <StoreCtx.Provider value={store}>\n      <Skeleton loading={loading}>\n        {/* 表单查询区域 */}\n        <BaseForm  columns={columns} />\n        {/* 操作区域 */}\n        {\n          btns.length > 0 &&   <div style={{ marginTop: 14, background: '#fff', padding: 10 }}>\n          {btns.map((btn: any, idx) => (\n            <Button key={idx.toString()} style={{ marginRight: 5 }} {...btn}>\n              {btn.label}\n            </Button>\n          ))}\n        </div>\n        }\n      \n        {/* 列表组件 */}\n        <Table columns={columns} />\n      </Skeleton>\n    </StoreCtx.Provider>\n  );\n};\n\nexport default ProTabel;\n","import { useRef, useState } from 'react'\n\ntype Result = {\n  total: number,\n  data:  Record<string, string | number | JSX.Element>[];\n}\n\ntype Params = {\n  formatData?: (res: any) => Result,\n  query?: (pageIndex: number, searchValues: object) => ({\n    [key: string]: any\n  })\n}\n\nexport interface useTableData extends Params {\n  data:  Record<string, string | number | JSX.Element>[]\n  total: number\n  key: string\n  reset: () => void\n  refersh: () => void\n  onSearch: () => void\n  updateStore: (p: stateParams) => void\n  searchValues: object,\n  loading: boolean\n}\n\nexport type stateParams = {\n  data?:  Record<string, string | number | JSX.Element>[],\n  total?: number,\n  selectChecked?: [],\n  selectCheckedRows?: [],\n}\n\nconst useTable = (key: string, params: Params = {}): useTableData => {\n\n  const { formatData, query } = params\n\n\n  const [state, setState] = useState<any>({\n     // 总页数\n    total: 1,\n    // 当前table数据源\n    data: [],\n    // 选中的行\n    selectChecked: [],\n    selectCheckedRows: [],\n    // 表单值\n    searchValues: {},\n    // 加载状态\n    loading: false,\n  });\n  // 更新store\n  const updateStore = (datas: stateParams) => {\n    setState({\n      ...state,\n      ...datas,\n    })\n  }\n\n  // 重置\n  const reset = () => {\n\n  }\n  // 刷新当前页数据\n  const refersh = () => {\n\n  }\n  // 点击查询\n  const onSearch = () => {\n\n  }\n\n  return {\n    key,\n    // 重置\n    reset,\n    // 刷新当前页数据\n    refersh,\n    // 点击查询\n    onSearch,\n    formatData,\n    query,\n    updateStore,\n    ...state,\n  }\n}\n\n\nexport default useTable","import React, { memo } from 'react';\nimport { Drawer, Button, DrawerProps, Row, Col } from 'uiw';\n\n/**\n * ProDrawer 组件继承于https://uiwjs.github.io/#/components/drawer\n * @param {boolean} visible 显示隐藏\n * @param {string} title 标题\n * @param {()=>void} onClose 关闭事件\n * @param {number} width Drawer宽\n * @param {Array<{label?:string,onPress?:()=>void,show?:boolean,loading?:boolean}>} buttons 按钮集合(label:\"文本\",onPress:点击事件,show:是否展示)\n * @param {React.ReactNode} children\n * @returns\n */\n\ninterface ButtonItemsProps {\n  label?: string;\n  onPress?: () => void;\n  show?: boolean;\n  size?: 'large' | 'default' | 'small';\n  type?: 'primary' | 'success' | 'warning' | 'danger' | 'light' | 'dark' | 'link';\n  loading?: boolean;\n  width?: number\n}\n\ninterface ProDrawerProps extends DrawerProps {\n  visible: boolean;\n  title?: string;\n  onClose?: any;\n  width?: number;\n  buttons?: Array<ButtonItemsProps>;\n  children?: React.ReactNode\n}\nfunction ProDrawer(props: ProDrawerProps) {\n  const { visible, title = '', onClose = null, width = 800, buttons = [], children, ...others } = props\n  return (\n    <Drawer\n      title={title}\n      isOpen={visible}\n      onClose={onClose && onClose}\n      size={width}\n      bodyStyle={{ padding: '0 10px 45px 10px' }}\n      {...others}\n      footer={\n        buttons.map(\n          ({ label = '', onPress, show = true, loading, type = \"primary\", width = 60, size = \"default\" }, idx) =>\n            show && (\n              <Button\n                style={{ width: width }}\n                key={idx}\n                type={type}\n                size={size}\n                onClick={onPress && onPress}\n                loading={loading}\n              >\n                {label}\n              </Button>\n            )\n        )\n      }\n    >\n      {children}\n    </Drawer>\n  );\n}\n\nexport default memo(ProDrawer);\n"],"names":["options","value","label","props","updateData","dispatch","useDispatch","useSelector","state","demo","drawerVisible","tableType","queryInfo","isView","onClose","type","mutate","useSWR","insert","update","method","body","revalidateOnMount","revalidateOnFocus","onSuccess","data","code","Notify","title","message","width","visible","onSubmit","initial","current","onChange","fields","firstName","labelClassName","labelStyle","inline","initialValue","children","disabled","lastName","email","validator","currentValue","length","select","map","canSubmit","gutter","style","marginBottom","fixed","align","htmlType","payload","table","useTable","selectPage","formatData","total","rows","query","pageIndex","console","log","page","pageSize","handleEditTable","record","id","btns","onClick","bind","columns","key","widget","widgetProps","preIcon","placeholder","option","render","text","rowData","size","selectById","params","request","loading","display","bgColor","StoreCtx","createContext","useStore","useContext","useState","store","searchValues","isFirstMountRef","useRef","formatQuery","defaultSearchValues","onSearch","isValidating","useCallback","setLoading","setPageIndex","res","JSON","onPageChange","undefined","useEffect","col","name","updateStore","footer","divider","opt","widgets","input","radio","checkbox","switch","textarea","dateInput","timePicker","monthPicker","MonthPicker","getFormFields","Object","Widget","background","paddingBottom","resetOnSubmit","onFormSearch","onSubmitError","error","resetForm","marginTop","useMemo","reset","refersh","Provider","padding","marginRight","btn","idx","selectChecked","selectCheckedRows","datas","setState","ProDrawer","buttons","isOpen","bodyStyle","show","onPress","memo"],"sourceRoot":""}