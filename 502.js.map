{"version":3,"file":"502.js","mappings":"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","sources":["webpack://@examples/base/./src/pages/TableList/index.tsx","webpack://@examples/base/../../packages/components/src/Skeleton/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/hooks.ts","webpack://@examples/base/../../packages/components/src/ProTable/BaseTable.tsx","webpack://@examples/base/../../packages/components/src/ProTable/widgets/Select.tsx","webpack://@examples/base/../../packages/components/src/ProTable/BaseForm.tsx","webpack://@examples/base/../../packages/components/src/ProTable/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/useTable.ts","webpack://@examples/base/../../packages/components/src/ProDrawer/index.tsx"],"sourcesContent":["import React from 'react';\nimport { ProTable, useTable } from '@uiw-admin/components';\n\nexport default function Demo() {\n  const table = useTable('/api/getData', {\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\n    formatData: (data) => {\n      return {\n        total: data.total,\n        data: data.data,\n      };\n    },\n    // 格式化查询参数 会接收到pageIndex 当前页  searchValues 表单数据\n    query: (pageIndex: number, searchValues: any) => {\n      return {\n        page: pageIndex,\n        pageSize: 10,\n        data: searchValues\n      };\n    },\n  });\n\n\n  return (\n    <ProTable\n      btns={[{ label: '新增', type: 'primary' }]}\n      table={table}\n      columns={[\n        {\n          title: '名字',\n          key: 'name',\n          props: {\n            widget: 'input',\n            initialValue: 'zzz',\n            // 组件属性\n            widgetProps: {\n              preIcon: 'user',\n              placeholder: '输入用户名'\n            }\n          },\n        },\n        {\n          title: '年龄',\n          key: 'age',\n          props: {\n            widget: 'select',\n            option: [\n              { label: '20', value: 20 },\n              { label: '10', value: 10 },\n            ],\n          },\n        },\n        {\n          title: '地址',\n          key: 'info',\n        },\n      ]}\n    />\n  );\n}\n","import React from 'react';\nimport { Loader } from 'uiw';\n\ninterface SkeletonProps {\n  children: React.ReactNode;\n  loading?: boolean;\n}\n\nconst Skeleton: React.FC<SkeletonProps> = ({ children, loading = false }) => {\n  return (\n    <Loader\n      loading={loading}\n      style={{ display: 'block', }}\n      // fullscreen={true}\n      bgColor=\"rgba(255, 255, 255, 0.4)\"\n    >\n      <>{children}</>\n    </Loader>\n  );\n};\n\nexport default Skeleton;\n","import {\n  useContext,\n  createContext,\n} from 'react';\n\nexport const StoreCtx = createContext({});\n\n\nexport const useStore = () => {\n  return useContext(StoreCtx);\n};\n\n\n\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport useSWR from 'swr';\nimport { Table, Pagination, TableColumns, Button } from 'uiw';\nimport { request } from '@uiw-admin/utils';\nimport { useStore } from './hooks';\nimport { Fields } from './BaseForm';\n\ninterface BaseTableProps {\n  style?: React.CSSProperties;\n  columns: TableColumns[];\n}\n\nconst BaseTable: React.FC<BaseTableProps> = ({ style, columns }) => {\n  const [pageIndex, setPageIndex] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  const store = useStore();\n\n  let { formatData, updateStore, query, key, searchValues } = store as any;\n\n  // 是否首次调取数据\n  const isFirstMountRef = useRef(false);\n  // 格式化接口查询参数\n  const formatQuery = (defaultSearchValues?: Fields, page?:number) => {\n    if (query) {\n      return query(page || pageIndex, defaultSearchValues || searchValues);\n    } else {\n      // 默认传参\n      return {\n        page: page || pageIndex,\n        pageSize: 10,\n      };\n    }\n  };\n\n  const pageSize = formatQuery().pageSize || 10;\n\n\n  const { data, error, mutate, isValidating } = useSWR(\n    [key, { method: 'POST', body: formatQuery() }],\n    request,\n    {\n      revalidateOnMount: false,\n      revalidateOnFocus: false,\n    },\n  );\n  // 分页查询\n  const onSearch = useCallback(async (current) => {\n    setLoading(true)\n    setPageIndex(1)\n    await request(key, { method: 'POST', body: formatQuery(current, 1) }).then(res => {\n      setLoading(false)\n      mutate(res, false);\n      console.log(123);\n     \n    });\n  }, [request, mutate, JSON.stringify(searchValues)]);\n\n  const onPageChange = useCallback(async (page) => {\n    setLoading(true)\n    setPageIndex(page)\n    request(key, { method: 'POST', body: formatQuery(undefined, page) }).then(res => {\n      setLoading(false)\n      mutate(res, false);\n     \n    });\n  }, [request, mutate, JSON.stringify(searchValues), pageIndex]);\n\n\n  useEffect(() => {\n    // 获取表单默认值\n    const defaultSearchValues: Fields = {};\n    columns.forEach((col) => {\n      if (col?.props?.initialValue) {\n        const name = col.key || col.props.key;\n        defaultSearchValues[name] = col.props.initialValue;\n      }\n    });\n    updateStore({\n      data: data?.data,\n      total: data?.total,\n      loading: loading,\n      onSearch\n    });\n\n    if (!isFirstMountRef.current) {\n      isFirstMountRef.current = true;\n      updateStore({\n        searchValues: defaultSearchValues,\n      });\n      setLoading(true)\n      // 第一次加载\n      request(key, {\n        method: 'POST',\n        body: formatQuery(defaultSearchValues),\n      }).then((res) => {\n        setLoading(false)\n        mutate(res, false);\n      });\n    }\n  }, [JSON.stringify(data), onSearch, loading, JSON.stringify(columns)]);\n\n  return (\n    <Table\n      columns={columns}\n      data={formatData && data ? formatData(data).data : data?.data}\n      style={style}\n      footer={\n        <Pagination\n          current={pageIndex}\n          pageSize={pageSize}\n          total={formatData && data ? formatData(data).total : data?.total}\n          divider\n          onChange={(page) => {\n            \n            onPageChange(page)\n          }}\n        />\n      }\n    />\n  );\n};\n\nexport default BaseTable;\n","import React from 'react';\nimport { Select } from 'uiw';\n\ninterface FormSelectProps {\n  option?: HTMLOptionElement[];\n}\n\nconst FormSelect: React.FC<FormSelectProps> = ({ option }) => {\n  return (\n    <Select>\n      <Select.Option value=\"\">请选择</Select.Option>\n      {option &&\n        option.map((opt) => (\n          <Select.Option key={opt.value} value={opt.value}>\n            {opt.label}\n          </Select.Option>\n        ))}\n    </Select>\n  );\n};\n\nexport default FormSelect;\n","import React, { useEffect } from 'react';\nimport {\n  Button,\n  Input,\n  Form,\n  Row,\n  Col,\n  Radio,\n  Checkbox,\n  Switch,\n  SearchSelect,\n  Textarea,\n  DateInput,\n  TimePicker,\n  MonthPicker,\n  FormSubmitProps,\n} from 'uiw';\nimport { FormCol } from './index';\nimport Select from './widgets/Select';\nimport { useStore } from './hooks';\n\ninterface BaseFormProps {\n  columns: FormCol[];\n}\n\nexport type Fields = {\n  [key: string]: any;\n};\n\nconst widgets = {\n  input: Input,\n  radio: Radio,\n  checkbox: Checkbox,\n  switch: Switch,\n  select: Select,\n  // searchSelect: SearchSelect,\n  textarea: Textarea,\n  dateInput: DateInput,\n  timePicker: TimePicker,\n  monthPicker: MonthPicker,\n};\n\nconst BaseForm: React.FC<BaseFormProps> = (props) => {\n  const store = useStore();\n\n  let { updateStore, reset, onSearch } = store as any;\n\n  const { columns } = props;\n  // 获取表单配置\n  const getFormFields = () => {\n    const fields: Fields = {};\n    columns.forEach((col) => {\n      if (col.props && Object.keys(col.props).length > 0) {\n        const { widgetProps, key, widget, label, initialValue, ...otherProps } =\n          col.props;\n        const name = col.key || key;\n        const Widget = widgets[widget];\n        fields[name] = {\n          label: col.title || label,\n          children: <Widget {...widgetProps} />,\n          ...otherProps,\n          initialValue,\n        };\n      }\n    });\n\n    return fields;\n  };\n\n  // 处理更新默认值\n\n  useEffect(() => {\n    updateStore({\n      searchValues: { ...getFormFields().defaultValues },\n    });\n  }, [JSON.stringify(getFormFields().defaultValues)]);\n\n  // 查询\n  const onFormSearch = ({ initial, current }: FormSubmitProps) => {\n    updateStore({\n      searchValues: {\n        ...initial,\n        ...current,\n      },\n    });\n    onSearch(current);\n  };\n\n  // 重置\n\n  const onReset = (resetForm: () => void) => {\n    resetForm();\n  };\n\n  return (\n    <Form\n      style={{ background: '#fff', paddingBottom: 5 }}\n      resetOnSubmit={false}\n      onSubmit={({ initial, current }) => {\n        onFormSearch({ initial, current });\n      }}\n      onSubmitError={(error) => {\n        if (error.filed) {\n          return { ...error.filed };\n        }\n        return null;\n      }}\n      fields={getFormFields()}\n    >\n      {({ fields, state, canSubmit, resetForm }) => {\n        return (\n          <div>\n            <Row gutter={10}>\n              {Object.keys(fields).map((key) => (\n                <Col key={key} fixed>\n                  {fields[key]}\n                </Col>\n              ))}\n\n              <Col style={{ marginTop: 31 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  查询\n                </Button>\n                {/* <Button type=\"warning\" onClick={() => onReset(resetForm)}>\n                  重置表单\n                </Button> */}\n              </Col>\n            </Row>\n          </div>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default BaseForm;\n","import React, { useState, useMemo } from 'react';\nimport { Button, Input, Form, ButtonProps, Row, Col, TableColumns } from 'uiw';\nimport Skeleton from '../Skeleton';\nimport Table from './BaseTable';\nimport BaseForm from './BaseForm';\nimport { StoreCtx } from './hooks';\nimport { useTableData } from './useTable';\n\n// interface BtnItem extends ButtonProps{\n//   label: React.ReactNode;\n// };\ninterface ProtableProps {\n  table: useTableData;\n  btns?: Array<ButtonProps>;\n  columns: FormCol[];\n}\n\nexport interface FormCol extends TableColumns {\n  props?: {\n    widget: 'input' | 'radio' | 'checkbox' | 'switch' | 'select' | 'textarea' | 'dateInput' | 'timePicker' | 'monthPicker',\n    [key: string]: any\n  }\n}\n\nconst ProTabel: React.FC<ProtableProps> = ({ table, columns, btns = [] }) => {\n\n  const { key, data, reset, refersh, updateStore, formatData, query, searchValues, loading, onSearch } = table;\n\n  const store = useMemo(\n    () => ({\n      data: [],\n      reset,\n      refersh,\n      key,\n      updateStore,\n      formatData,\n      query,\n      searchValues,\n      onSearch\n    }),\n    [JSON.stringify(data), reset, refersh, key, updateStore, formatData, query, JSON.stringify(searchValues), onSearch],\n  );\n\n\n  return (\n    <StoreCtx.Provider value={store}>\n      <Skeleton loading={loading}>\n        {/* 表单查询区域 */}\n        <BaseForm  columns={columns} />\n        {/* 操作区域 */}\n        {\n          btns.length > 0 &&   <div style={{ marginTop: 14, background: '#fff', padding: 10 }}>\n          {btns.map((btn: any, idx) => (\n            <Button key={idx.toString()} style={{ marginRight: 5 }} {...btn}>\n              {btn.label}\n            </Button>\n          ))}\n        </div>\n        }\n      \n        {/* 列表组件 */}\n        <Table columns={columns} />\n      </Skeleton>\n    </StoreCtx.Provider>\n  );\n};\n\nexport default ProTabel;\n","import { useRef, useState } from 'react'\n\ntype Result = {\n  total: number,\n  data:  Record<string, string | number | JSX.Element>[];\n}\n\ntype Params = {\n  formatData?: (res: any) => Result,\n  query?: (pageIndex: number, searchValues: object) => ({\n    [key: string]: any\n  })\n}\n\nexport interface useTableData extends Params {\n  data:  Record<string, string | number | JSX.Element>[]\n  total: number\n  key: string\n  reset: () => void\n  refersh: () => void\n  onSearch: () => void\n  updateStore: (p: stateParams) => void\n  searchValues: object,\n  loading: boolean\n}\n\nexport type stateParams = {\n  data?:  Record<string, string | number | JSX.Element>[],\n  total?: number,\n  selectChecked?: [],\n  selectCheckedRows?: [],\n}\n\nconst useTable = (key: string, params: Params = {}): useTableData => {\n\n  const { formatData, query } = params\n\n\n  const [state, setState] = useState<any>({\n     // 总页数\n    total: 1,\n    // 当前table数据源\n    data: [],\n    // 选中的行\n    selectChecked: [],\n    selectCheckedRows: [],\n    // 表单值\n    searchValues: {},\n    // 加载状态\n    loading: false,\n  });\n  // 更新store\n  const updateStore = (datas: stateParams) => {\n    setState({\n      ...state,\n      ...datas,\n    })\n  }\n\n  // 重置\n  const reset = () => {\n\n  }\n  // 刷新当前页数据\n  const refersh = () => {\n\n  }\n  // 点击查询\n  const onSearch = () => {\n\n  }\n\n  return {\n    key,\n    // 重置\n    reset,\n    // 刷新当前页数据\n    refersh,\n    // 点击查询\n    onSearch,\n    formatData,\n    query,\n    updateStore,\n    ...state,\n  }\n}\n\n\nexport default useTable","import React, { memo } from 'react';\nimport { Drawer, Button, DrawerProps, Row, Col } from 'uiw';\n\n/**\n * ProDrawer 组件继承于https://uiwjs.github.io/#/components/drawer\n * @param {boolean} visible 显示隐藏\n * @param {string} title 标题\n * @param {()=>void} onClose 关闭事件\n * @param {number} width Drawer宽\n * @param {Array<{label?:string,onPress?:()=>void,show?:boolean,loading?:boolean}>} buttons 按钮集合(label:\"文本\",onPress:点击事件,show:是否展示)\n * @param {React.ReactNode} children\n * @returns\n */\n\ninterface ButtonItemsProps {\n  label?: string;\n  onPress?: () => void;\n  show?: boolean;\n  size?: 'large' | 'default' | 'small';\n  type?: 'primary' | 'success' | 'warning' | 'danger' | 'light' | 'dark' | 'link';\n  loading?: boolean;\n  width?: number\n}\n\ninterface ProDrawerProps extends DrawerProps {\n  visible: boolean;\n  title?: string;\n  onClose?: any;\n  width?: number;\n  buttons?: Array<ButtonItemsProps>;\n  children?: React.ReactNode\n}\nfunction ProDrawer(props: ProDrawerProps) {\n  const { visible, title = '', onClose = null, width = 800, buttons = [], children, ...others } = props\n  return (\n    <Drawer\n      title={title}\n      isOpen={visible}\n      onClose={onClose && onClose}\n      size={width}\n      bodyStyle={{ padding: '0 10px 45px 10px' }}\n      {...others}\n      footer={\n        buttons.map(\n          ({ label = '', onPress, show = true, loading, type = \"primary\", width = 60, size = \"default\" }, idx) =>\n            show && (\n              <Button\n                style={{ width: width }}\n                key={idx}\n                type={type}\n                size={size}\n                onClick={onPress && onPress}\n                loading={loading}\n              >\n                {label}\n              </Button>\n            )\n        )\n      }\n    >\n      {children}\n    </Drawer>\n  );\n}\n\nexport default memo(ProDrawer);\n"],"names":["Demo","table","useTable","formatData","data","total","query","pageIndex","searchValues","page","pageSize","btns","label","type","columns","title","key","props","widget","initialValue","widgetProps","preIcon","placeholder","option","value","loading","style","display","bgColor","children","StoreCtx","createContext","useStore","useContext","useState","store","isFirstMountRef","useRef","formatQuery","defaultSearchValues","useSWR","method","body","revalidateOnMount","revalidateOnFocus","onSearch","isValidating","useCallback","setLoading","setPageIndex","current","res","mutate","console","JSON","onPageChange","request","undefined","useEffect","col","name","updateStore","footer","divider","onChange","opt","widgets","input","radio","checkbox","switch","select","textarea","dateInput","timePicker","monthPicker","MonthPicker","getFormFields","fields","Object","Widget","background","paddingBottom","resetOnSubmit","onSubmit","onFormSearch","initial","onSubmitError","error","resetForm","gutter","fixed","marginTop","htmlType","useMemo","reset","refersh","Provider","padding","marginRight","btn","idx","params","selectChecked","selectCheckedRows","datas","setState","ProDrawer","onClose","width","buttons","isOpen","size","bodyStyle","show","onClick","onPress","memo"],"sourceRoot":""}