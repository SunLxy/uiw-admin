{"version":3,"file":"static/js/523.a2333e49.chunk.js","mappings":"+GAAA","sources":["../../../packages/components/src/ProForm/README.md"],"sourcesContent":["export default \"# 基于uiw-form封装的业务表单\\n\\n## 注意\\n- [继承于uiw/form,请参考uiw/from以及表单组件](https://uiwjs.github.io/#/components/form)\\n- 组件默认集成了Input,Checkbox,Switch,Textarea,DateInput,TimePicker,MonthPicker,SearchSelect,Select,Radio。\\n\\n<!--ProForm-->\\n\\n### 基本使用(与uiw/form使用保持一致)\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { ProForm } from '@uiw-admin/components'\\nimport { Button,Notify,Slider } from 'uiw'\\nconst Demo = () => {\\n    return (\\n       <ProForm\\n         // 表单类型\\n         formType=\\\"collapse\\\"\\n         title=\\\"基本使用(与uiw/form使用保持一致)\\\"\\n         // 自定义组件\\n         customWidgetsList={{\\n          slider: Slider,\\n        }}\\n         // 是否展示uiw/form提交按钮\\n         showSaveButton\\n         // 是否展示uiw/form重置按钮\\n         showResetButton\\n         // 提交后验证\\n         onSubmit={(initial, current) => {\\n          const errorObj = {};\\n          if (!current?.input) {\\n            errorObj.input = 'input不能为空';\\n          }\\n          if (Object.keys(errorObj).length > 0) {\\n            const err = new Error();\\n            err.filed = errorObj;\\n            Notify.error({ title: '提交失败！' });\\n            throw err;\\n          }\\n          // 调用请求接口\\n        }}\\n         // 表单值变化 \\n         onChange={(initial, current) => {}}\\n         formDatas={[\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               help:\\\"input不能为空\\\"\\n             },\\n             {\\n              label: 'textarea',\\n              key: 'textarea',\\n              widget: 'textarea',\\n             },\\n             {\\n              label: 'select',\\n              key: 'select',\\n              widget: 'select',\\n              option: [\\n                { value: 1, label: '苹果' },\\n                { value: 2, label: '西瓜' },\\n                { value: 3, label: '香蕉' },\\n                { value: 4, label: '东北大冻梨' }\\n              ],\\n            },\\n            {\\n              label: 'switch',\\n              key: 'switch',\\n              widget: 'switch',\\n            },\\n            {\\n              label: 'radio',\\n              widget: 'radio',\\n              key: 'radio',\\n              option: [\\n                { label: '男', value: 'man' },\\n                { label: '女', value: 'girl' }\\n              ],\\n            },\\n            {\\n              label: '多选框',\\n              widget: 'checkbox',\\n              key: 'checkbox',\\n              option: [\\n                { label: '四川菜', value: 'sichuan' },\\n                { label: '湖北菜', value: 'hubei' }\\n              ],\\n            },\\n            {\\n              label: '年月日时分秒',\\n              key: 'dateInputsecond',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                format: 'YYYY-MM-DD HH:mm:ss'\\n              },\\n            },\\n            {\\n              label: '年月日',\\n              key: 'dateInput',\\n              widget: 'dateInput',\\n            },\\n            {\\n              label: '年月',\\n              key: 'monthPicker',\\n              widget: 'monthPicker',\\n            },\\n            {\\n              label: '时分秒',\\n              key: 'timePicker',\\n              widget: 'timePicker',\\n            },\\n            // 只读模式下支持读取React.ReactNode\\n            {\\n              label: '自定义组件',\\n              key: 'slider',\\n              widget: 'slider',\\n              readSpan: 2,\\n              span:\\\"24\\\"\\n            },\\n          ]}\\n       />\\n  )\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 通过submitRef进行表单提交\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState,useRef } from 'react';\\nimport { ProForm } from '@uiw-admin/components'\\nimport { Button,Notify } from 'uiw'\\nconst Demo = () => {\\n\\n  const submitRef = useRef()\\n\\n    return (\\n     <div>\\n       <ProForm\\n         submitRef={submitRef}\\n         title=\\\"通过submitRef进行表单提交\\\"\\n         formType=\\\"card\\\"\\n         onSubmit={(initial, current) => {\\n          const errorObj = {};\\n          if (!current?.input) {\\n            errorObj.input = 'input不能为空';\\n          }\\n          if (Object.keys(errorObj).length > 0) {\\n            const err = new Error();\\n            err.filed = errorObj;\\n            Notify.error({ title: '提交失败！' });\\n            throw err;\\n          }\\n          // 调用请求接口\\n        }}\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\"\\n             },\\n          ]}\\n       />\\n       <Button style={{ marginTop:10,width:80 }} type=\\\"primary\\\" onClick={()=>submitRef?.current?.click()}>保存</Button>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 只读模式\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { ProForm } from '@uiw-admin/components'\\nimport { formatter } from 'uiw'\\nimport React, { useState } from 'react';\\nconst Demo = () => {\\n  const [ queryInfo ] = useState({\\n    input:\\\"周政\\\",\\n    textarea:\\\"周政\\\",\\n    select:\\\"周政\\\",\\n    dateInputsecond: '2021-1-21 23:59:59',\\n    dateInput: '2021-1-21',\\n    monthPicker: '2021-1-21',\\n    timePicker: '2021-1-21 23:59:59',\\n  })\\n    return (\\n       <ProForm\\n         // 表单类型\\n         formType=\\\"pure\\\"\\n         readOnly={true}\\n         title=\\\"只读模式\\\"\\n         // 只读模式下调整 一行的 DescriptionItems 数量,其余参数参考uiw/Descriptions\\n         readOnlyProps={{ column:2 }}\\n         formDatas={\\n           [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               // 只读模式下支持读取React.ReactNode\\n               initialValue: queryInfo?.input,\\n             },\\n             {\\n               label: 'textarea',\\n               key: 'textarea',\\n               widget: 'textarea',\\n               initialValue: queryInfo?.textarea,\\n             },\\n             {\\n               label: 'select',\\n               key: 'select',\\n               widget: 'select',\\n               option:[{label:\\\"周政\\\",value:\\\"周政\\\"}],\\n               initialValue: queryInfo?.select,\\n             },\\n             {\\n              label: 'dateInput',\\n              key: 'dateInputsecond',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                // 年月日时分秒\\n                format: 'YYYY-MM-DD HH:mm:ss'\\n              },\\n              initialValue: queryInfo.dateInputsecond && formatter('YYYY-MM-DD HH:mm:ss', new Date(queryInfo.dateInputsecond))\\n            },\\n            {\\n              label: 'dateInput',\\n              key: 'dateInput',\\n              widget: 'dateInput',\\n              initialValue: queryInfo.dateInput && formatter('YYYY-MM-DD', new Date(queryInfo.dateInput))\\n            },\\n            {\\n              label: 'monthPicker',\\n              key: 'monthPicker',\\n              widget: 'monthPicker',\\n              initialValue: queryInfo.monthPicker && formatter('YYYY-MM', new Date(queryInfo.monthPicker))\\n            },\\n            {\\n              label: 'timePicker',\\n              key: 'timePicker',\\n              widget: 'timePicker',\\n              initialValue: queryInfo.timePicker && new Date(queryInfo.timePicker)\\n            },\\n           ]}\\n       />\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n## Porps  继承uiw-Form\\n\\n| 参数 | 说明\\t| 类型\\t| 默认值 |\\n| --  | -- | -- | -- |\\n| formDatas | 表单项集合\\t| FormItemsProps[]\\t\\t| [] |\\n| onSubmit | 提交表单回调 需配合btns，继承uiw/form submit\\t| (initial: `Record<string, any>`, current: `Record<string, any>`) => void\\t\\t| - |\\n| onChange | 表单值变化回调，继承uiw/form onChange\\t| (initial: `Record<string, any>`, current: `Record<string, any>`) => void\\t| - |\\n| showSaveButton | 展示提交按钮\\t|  boolean\\t\\t| false |\\n| showResetButton | 展示重置按钮\\t|  boolean\\t\\t| false |\\n| saveButtonProps | 提交按钮api;继承于uiw/button\\t|  boolean\\t\\t| false |\\n| resetButtonProps | 重置按钮api;继承于uiw/button\\t|  boolean\\t\\t| false |\\n| buttonsContainer  | buttons容器样式(可调整button布局)\\t| React.CSSProperties\\t\\t| - |\\n| title | 标题\\t  | string\\t\\t| - |\\n| formType | 表单类型\\t  | 'collapse' 或 'card' 或 'pure'\\t\\t| 'card' |\\n| submitRef | 获取表单提交事件ref\\t  |  any\\t\\t| - |\\n| readOnly | 是否是只读模式模式\\t  |  boolean\\t\\t| false |\\n| readOnlyProps | 只读模式 参考Descriptions参数\\t  |  DescriptionsProps\\t\\t| {} |\\n| customWidgetsList | 可配置自定义组件\\t  |  { [key: string]: any }\\t\\t| {} |\\n\\n## FormItemsProps 继承uiw-FormItem\\n| 参数 | 说明\\t| 类型\\t| 默认值 |\\n| --  | -- | -- | -- |\\n| label| 表单项名称 | string\\t| - |\\n| key| 表单项key| string\\t| - |\\n| widget| 表单项类型| sring\\t| - |\\n| initialValue| 表单项值，可以是默认值| any 或 any[]\\t| - |\\n| option| 数据化选项内容, type为 radio、checkbox、select 生效| FormItemsOptionsProps[]| - |\\n| widgetProps| 表单组件其余参数,参考uiw表单组件| any|- |\\n| hide| 是否显示| boolean| true |\\n| span| 非只读模式下,可以通过指定 24 列中每列的宽度来创建基本网格系统| string| '8' |\\n| readSpan| 只读模式下包含列的数量 参考Descriptions.Item| number | 1 |\\n| required| 是否必填| boolean | - |\\n\\n\\n## FormItemsOptionsProps\\n| 参数 | 说明\\t| 类型\\t| 默认值 |\\n| --  | -- | -- | -- |\\n| label| 名称 | string(必传值)\\t| - |\\n| value| key | string 或 number(必传值)\\t| - |\\n| disabled| 是否禁用 | boolean\\t| - |\\n\\n\";"],"names":[],"sourceRoot":""}