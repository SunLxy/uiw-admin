{"version":3,"file":"static/js/9476.e177d852.chunk.js","mappings":"gHAAA","sources":["../../../packages/router-control/README.md"],"sourcesContent":["export default \"# 菜单路由管理\\n\\n[![npm version](https://img.shields.io/npm/v/@uiw-admin/router-control.svg?label=@uiw-admin/router-control)](https://www.npmjs.com/package/@uiw-admin/router-control)\\n\\n在项目根目录的`config/routes.json`配置菜单路由\\n\\n> 1. 进行路由处理转换\\n> 2. 进行路由权限处理\\n\\n⚠️ 注意：\\n\\n  1. 菜单路由文件优先级 `json > ts > js`\\n  2. 菜单路由使用`js`和`ts`文件时，如果文件中已经书写 `import React from \\\"react\\\"` 这句代码，在生成的 `.uiw/routes.tsx` 文件中不会再次进行生成\\n\\n## 安装\\n\\n```bash\\nnpm i @uiw-admin/router-control --save # yarn add  @uiw-admin/router-control\\n```\\n\\n## 路由控制组件参数\\n\\n| 参数       | 必须 | 类型                                          | 默认值    | 说明                                   |\\n| :--------- | :--- | :-------------------------------------------- | :-------- | :------------------------------------- |\\n| routeType  | 否   | `\\\"history\\\" \\\\| \\\"hash\\\" \\\\| \\\"browser\\\"`            | `hash`    | 路由模式                               |\\n| addModels  | 否   | `(path: string) => Promise<{ default: any }>` | undefined |                                        |\\n| isAutoAuth | 否   | `boolean`                                     | `true` | 是否自动校验 \\\"/\\\" 的路由 token 是否存在 |\\n\\n> 如果验证登录的字段不是token,可通过https://uiwjs.github.io/uiw-admin/#/config?title=defaultdefinetype-%E7%B1%BB%E5%9E%8B TOKEN_NAME 自定义\\n\\n⚠️注意： `routeType`值为 `history`或`browser` 的时候需要设置 `kktrc` 配置 `publicPath` 值为 `\\\"/\\\"`\\n\\n```ts\\n// kktrc.ts \\n// ...\\nexport default defaultConfig({\\n  publicPath:\\\"/\\\",\\n  // ...\\n})\\n```\\n\\n## 菜单路由参数\\n\\n| 参数       | 必须 | 类型                         | 默认值    | 说明                                                                                                             |\\n| :--------- | :--- | :--------------------------- | :-------- | :--------------------------------------------------------------------------------------------------------------- |\\n| index      | 否   | `boolean`                    | undefined | 默认跳转(与`redirect`一起使用)                                                                                   |\\n| redirect   | 否   | `string`                     | undefined | 重定向  当`index===true`生效                                                                                     |\\n| path       | 否   | `string`                     | undefined | 跳转路由                                                                                                         |\\n| name       | 否   | `string`                     | undefined | 菜单名称                                                                                                         |\\n| icon       | 否   | `string \\\\| React.React.Node` | undefined | 菜单图标标                                                                                                       |\\n| component  | 否   | `string`                     | undefined | 渲染组件的路径(如果是`403/404/500`的页面直接写 `403/404/500`,使用`@uiw-admin/plugins`里面的`routes`时会进行转换) |\\n| hideInMenu | 否   | `boolean`                    | 无        | 是否隐藏菜单                                                                                                     |\\n| isAuth     | 否   | `boolean`                    | 无        | 用于路由校验权限， 注意：如果存在这个字段则以这个字段权限为准                                                    |\\n| routes     | 否   | `RoutersJSON[]`              | 无        | 子集 路由 ,(参数与菜单路由参数一致)                                                                              |\\n| navigate   | 否   | `string`                     | 无        | 自定义跳转(`\\\"(navigate) => {console.log('navigate', navigate)}\\\"`)                                                |\\n\\n## 自定义菜单图标\\n\\n注意：使用`js`或`ts`文件才有自定义功能\\n\\n```js\\n// config/routes.js\\n\\nimport { chat } from \\\"@/assets\\\"\\nimport { Icon } from \\\"uiw\\\"\\nimport React from \\\"react\\\"\\nconst routes = [\\n  {\\n    \\\"path\\\": \\\"/\\\",\\n    \\\"component\\\": \\\"@/layouts/BasicLayout\\\",\\n    \\\"routes\\\": [\\n      {\\n        \\\"index\\\": true,\\n        \\\"redirect\\\": \\\"/tableList\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/tableList\\\",\\n        \\\"name\\\": \\\"查询表格\\\",\\n        \\\"component\\\": \\\"@/pages/TableList\\\",\\n        \\\"icon\\\": <Icon type={chat} />,\\n      },\\n    ]\\n  }\\n]\\nexport default routes\\n```\\n<!-- ## 参数\\n\\n```ts\\n\\n// json文件格式\\nexport interface RoutersJSON {\\n  key?: string;\\n  /** 默认跳转 */\\n  index?: boolean;\\n  /** 路径 */\\n  path?: string;\\n  /** 名称 */\\n  name?: string;\\n  /**  图标 */\\n  icon?: string | React.React.Node;\\n  /** 重定向  当 index===true生效 */\\n  redirect?: string;\\n  /** 组件地址 如果是 403/404/500 的页面直接写 403/404/500 就可以了，内部直接做转化*/\\n  component?:string;\\n  /** 子集 路由 */\\n  routes?: RoutersJSON[];\\n  /** 是否隐藏菜单 */\\n  hideInMenu?: boolean;\\n  /** 用于路由校验权限， 注意：如果存在这个字段则以这个字段权限为准 */\\n  isAuth?: boolean;\\n}\\n\\nexport interface ControllerProps {\\n  /** 路由模式   默认 history  */\\n  routeType?: \\\"history\\\" | \\\"hash\\\" | \\\"browser\\\";\\n  /** 加载 model 方法，(解决import引用地址问题报错) */ \\n  addModels?: (path: string) => Promise<{ default: any }>;\\n  /** 是否自动校验 \\\"/\\\" 路由  token 是否存在   */\\n  isAutoAuth?: boolean;\\n}\\n\\n``` -->\\n\\n## 组件提供-路由跳转方法\\n\\n1. `navigate` 由 `react-router-dom`的`useNavigate` hook 赋值生成\\n2. `history` 当 `routeType=\\\"history\\\"` 才能使用，[使用方式](https://github.com/remix-run/history/blob/dev/docs/navigation.md)\\n\\n```ts\\n// navigate 使用方式\\nnavigate(\\\"/demo\\\",{/** ... */})\\n\\n// history 使用方式\\nhistory.push(\\\"/demo\\\");\\nhistory.push(\\\"/demo?d=12\\\", { some: \\\"state\\\" });\\nhistory.push(\\n  {\\n    pathname: \\\"/demo\\\",\\n    search: \\\"?d=12\\\",\\n  },\\n  {\\n    some: 1212,\\n  }\\n);\\nhistory.go(-1);\\nhistory.back();\\n```\\n\\n## routes.json案例\\n\\n> `@` 指向 src 目录\\n\\n```json\\n[\\n  {\\n    \\\"path\\\": \\\"/login\\\",\\n    \\\"component\\\": \\\"@/layouts/UserLayout\\\"\\n  },\\n  {\\n    \\\"path\\\": \\\"/\\\",\\n    \\\"component\\\": \\\"@/layouts/BasicLayout\\\",\\n    \\\"routes\\\": [\\n      {\\n        \\\"index\\\": true,\\n        \\\"redirect\\\": \\\"/tableList\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/home\\\",\\n        \\\"name\\\": \\\"首页\\\",\\n        \\\"component\\\": \\\"@/pages/TableList\\\",\\n        \\\"icon\\\": \\\"home\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/dom\\\",\\n        \\\"name\\\": \\\"子项\\\",\\n        \\\"icon\\\": \\\"copy\\\",\\n        \\\"routes\\\": [\\n          {\\n            \\\"path\\\": \\\"/dom/courses\\\",\\n            \\\"name\\\": \\\"Dashboard\\\",\\n            \\\"component\\\": \\\"@/pages/Dashboard\\\"\\n          }\\n        ]\\n      },\\n      {\\n        \\\"path\\\": \\\"/403\\\",\\n        \\\"name\\\": \\\"403\\\",\\n        \\\"hideInMenu\\\": true,\\n        \\\"component\\\": \\\"403\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/500\\\",\\n        \\\"name\\\": \\\"500\\\",\\n        \\\"hideInMenu\\\": true,\\n        \\\"component\\\": \\\"500\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/404\\\",\\n        \\\"name\\\": \\\"404\\\",\\n        \\\"hideInMenu\\\": true,\\n        \\\"component\\\": \\\"404\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"*\\\",\\n        \\\"name\\\": \\\"404\\\",\\n        \\\"component\\\": \\\"404\\\"\\n      }\\n    ]\\n  }\\n]\\n```\\n\\n## 案例\\n\\n```ts\\nimport React from \\\"react\\\";\\nimport Control from '@uiw-admin/router-control';\\nexport default ()=>{\\n  return (\\n    <Control\\n      routeType=\\\"hash\\\"\\n       // addModels={(path) => import(`${path}`)}\\n    />\\n  )\\n}\\n\\n```\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\";"],"names":[],"sourceRoot":""}