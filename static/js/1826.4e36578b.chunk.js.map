{"version":3,"file":"static/js/1826.4e36578b.chunk.js","mappings":"gHAAA","sources":["../../../packages/user-login/README.md"],"sourcesContent":["export default \"# 登录页面\\n\\n[![npm version](https://img.shields.io/npm/v/@uiw-admin/user-login.svg?label=@uiw-admin/user-login)](https://www.npmjs.com/package/@uiw-admin/user-login)\\n\\n简化项目登录页面，为了多项目登录页面不用重新构建登录页面\\n\\n## 何时使用\\n\\n在不重新构建登录页面的时候使用\\n\\n## 安装\\n\\n```bash\\nnpm i @uiw-admin/user-login --save  # yarn add  @uiw-admin/user-login\\n```\\n\\n<!-- ## 参数\\n\\n```ts\\n\\ntype FormValue = { username?: string, password?: string }\\n\\nexport interface UserLoginProps {\\n  /** 卡片框的位置 */\\n  align?: 'left' | 'right' | 'center';\\n  classNameWarp?: string;\\n  styleWarp?: React.CSSProperties;\\n  /** 卡片的 className */\\n  classNameBody?: string;\\n  /** 卡片的 style */\\n  styleBody?: React.CSSProperties;\\n  /** 页脚 */\\n  footer?: React.ReactNode;\\n  /** 背景图片 */\\n  bg?: string;\\n  /** 如果存在 children 则 覆盖默认登录框里面内容  */ \\n  children?: React.ReactNode;\\n  /** 项目名称 */\\n  projectName?: string;\\n  /** 登录接口返回 */\\n  onSuccess?: (resp: any, form: FormValue | undefined) => void;\\n  /** 登录按钮 属性 */\\n  btnProps?: Omit<ButtonProps, \\\"ref\\\">;\\n  /** 请求接口 */\\n  api?: string;\\n  /** 调用接口之前 , 可以通过这个添加额外参数  返回 false 则不进行登录操作  */\\n  onBefore?: (store: FormValue) => { [s: string]: any } | boolean;\\n  /** request 请求的 options 配置参数 */\\n  requestConfig?: Options;\\n    /** 登录按钮位置 按钮组, title 为显示标题 */\\n  buttons?: (Omit<ButtonProps, 'ref'> & { title?: React.ReactNode })[]\\n   /** 默认输入框保存字段  */\\n  saveField?: {\\n    /** 登录账号 默认值 username*/\\n    userName?: string,\\n    /** 密码 默认值 password */\\n    passWord?: string\\n  }\\n}\\n``` -->\\n\\n## 参数说明\\n\\n| 参数          | 必填 | 类型                                                          | 默认值                                      | 说明                                                               |\\n| :------------ | :--- | :------------------------------------------------------------ | :------------------------------------------ | :----------------------------------------------------------------- |\\n| align         | 否   | `枚举类型：'left' \\\\| 'right' \\\\| 'center'`                     | `center`                                    | 卡片框的位置                                                       |\\n| footer        | 否   | `React.ReactNode`                                             |                                             | 页脚                                                               |\\n| bg            | 否   | `string`                                                      |                                             | 页面背\\n| logo            | 否   | `string`                                                      |                                             | logo头像           |\\n| children      | 否   | `React.ReactNode`                                             |                                             | 替换卡片位置内容                                                   |\\n| projectName   | 否   | `string`                                                      | `KKT`                                       | 项目名称(页面标题)                                                 |\\n| btnProps      | 否   | `Omit<ButtonProps, 'ref'>`                                    | `{}`                                        | 登录按钮 属性                                                      |\\n| buttons       | 否   | `(Omit<ButtonProps, 'ref'> & { title?: React.ReactNode })[]`  |                                             | 登录按钮位置的自定义按钮组, title 为显示标题                       |\\n| api           | 是   | `string`                                                      |                                             | 请求接口                                                           |\\n| onSuccess     | 是   | `(resp: any, form: (FormValue \\\\| undefined)) => void`         | `()=>null`                                  | 登录接口返回                                                       |\\n| onBefore      | 否   | `(store: FormValue) => (Record<string, any> \\\\| boolean)`      |                                             | 用接口之前 , 可以通过这个添加额外参数  返回 false 则不进行登录操作 |\\n| requestConfig | 否   | `Options`                                                     |                                             | `request` 请求 `options` 配置参数                                  |\\n| saveField     | 否   | `{userName(登录账号字段)?:string,passWord(密码字段)?:string}` | `{userName:\\\"username\\\",passWord:\\\"password\\\"}` | 默认输入框保存字段                                                 |\\n| classNameWarp | 否   | `string`                                                      |                                             | 卡片框外层`className`                                              |\\n| styleWarp     | 否   | `React.CSSProperties`                                         |                                             | 卡片框外层`style`                                                  |\\n| classNameBody | 否   | `string`                                                      |                                             | 卡片框`className`                                                  |\\n| styleBody     | 否   | `React.CSSProperties`                                         |                                             | 卡片框`style`                                                      |\\n\\n## 基本使用\\n\\n```tsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\nconst UserLayout = () => {\\n  const navigate = useNavigate()\\n  return (\\n    <UserLogin\\n      api=\\\"/api/login\\\"\\n      // 登陆成功后回调\\n      onSuccess={(data) => {\\n        if (data && data.token) {\\n          sessionStorage.setItem(\\\"token\\\", data.token)\\n          sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n          navigate(\\\"/home\\\", { replace: true })\\n        } else {\\n         Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n        }\\n      }}\\n    />\\n  )\\n}\\nexport default UserLayout;\\n\\n```\\n## 配置接口参数\\n> 我们提供saveField配置登陆参数;onBefore登陆前回调;onSuccess登陆成功后回调。可更好拓展你的业务\\n```tsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\nconst UserLayout = () => {\\n  const navigate = useNavigate()\\n  return <UserLogin\\n    api=\\\"/api/login\\\"\\n    // 配置登陆参数\\n    saveField={{\\n      userName: \\\"username\\\",\\n      passWord: \\\"password\\\"\\n    }}\\n    // 调用登陆接口之前,可以通过这个添加额外参数 返回 false 则不进行登录操作\\n    onBefore={(value) => ({ a: 12, b: 1221 })}\\n    // 登陆成功后回调\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n        navigate(\\\"/home\\\", { replace: true })\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\nexport default UserLayout;\\n\\n```\\n\\n## 自定义按钮\\n> buttons可进行自定义按钮配置,从而做更多业务拓展(如注册等)\\n```tsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\nconst UserLayout = () => {\\n  const navigate = useNavigate()\\n  return <UserLogin\\n   buttons={[\\n       {\\n         title: \\\"登录\\\",\\n         htmlType: \\\"submit\\\",\\n       },\\n       {\\n         title: \\\"注册\\\",\\n       },\\n     ]}\\n    api=\\\"/api/login\\\"\\n    btnProps={{ type: \\\"primary\\\" }}\\n    // 登陆成功后回调\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n        navigate(\\\"/home\\\", { replace: true })\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\nexport default UserLayout;\\n\\n```\\n\\n## 默认预览\\n\\n![](https://user-images.githubusercontent.com/49544090/150922771-8a5fa5dc-8d82-4d3c-80ac-b61dcb5eb920.png)\\n\\n\\n## 自定义按钮预览\\n\\n![](https://user-images.githubusercontent.com/49544090/150929179-4854ca6c-25c8-4703-acee-9c7855821b8a.png)\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n\\n## License\\n\\nLicensed under the MIT License.\";"],"names":[],"sourceRoot":""}