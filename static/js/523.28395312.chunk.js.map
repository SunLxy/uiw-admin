{"version":3,"file":"static/js/523.28395312.chunk.js","mappings":"+GAAA","sources":["../../../packages/components/src/ProForm/README.md"],"sourcesContent":["export default \"# 基于uiw-form封装的业务表单\\n\\n## 注意\\n> [继承于uiw/form,请参考uiw/from以及表单组件](https://uiwjs.github.io/#/components/form),\\n 默认集成了`Input`,`Checkbox`,`Switch`,`Textarea`,`DateInput`,`TimePicker`,`MonthPicker`,`SearchSelect`,`Select`,`Radio`,`selectMultiple`,`Rate`。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!--ProForm-->\\n\\n### 基本使用(与uiw/form使用保持一致)\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { ProForm } from '@uiw-admin/components'\\nimport { Button,Notify,Slider } from 'uiw'\\nconst Demo = () => {\\n   const [option, setOption] = React.useState([])\\n   const [loading, setLoading] = React.useState(false)\\n   // 模拟搜索\\n  const handleSearch = ( type = '' , name = '' ) => {\\n    if (type === 'selectMultiple') {\\n      setLoading(true)\\n      setTimeout(() => {\\n        setOption([\\n          { value: 1, label: '苹果' },\\n          { value: 2, label: '西瓜' },\\n          { value: 3, label: '香蕉' },\\n          { value: 4, label: '东北大冻梨' },\\n          { value: 5, label: '香蕉' },\\n          { value: 6, label: '葡萄' },\\n          { value: 6, label: '哈密瓜' },\\n        ])\\n        setLoading(false)\\n      }, 2000)\\n    }\\n  }\\n    return (\\n       <ProForm\\n         // 表单类型\\n         formType=\\\"collapse\\\"\\n         title=\\\"基本使用(与uiw/form使用保持一致)\\\"\\n         // 自定义组件\\n         customWidgetsList={{\\n          slider: Slider,\\n        }}\\n         // 是否展示uiw/form提交按钮\\n         showSaveButton\\n         // 是否展示uiw/form重置按钮\\n         showResetButton\\n         // 提交后验证\\n         onSubmit={(initial, current) => {\\n          const errorObj = {};\\n          if (!current?.input) {\\n            errorObj.input = 'input不能为空';\\n          }\\n          if (Object.keys(errorObj).length > 0) {\\n            const err = new Error();\\n            err.filed = errorObj;\\n            Notify.error({ title: '提交失败！' });\\n            throw err;\\n          }\\n          // 调用请求接口\\n        }}\\n         // 表单值变化 \\n         onChange={(initial, current) => {}}\\n         formDatas={[\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               help:\\\"input不能为空\\\"\\n             },\\n             {\\n              label: 'textarea',\\n              key: 'textarea',\\n              widget: 'textarea',\\n             },\\n             {\\n              label: 'select',\\n              key: 'select',\\n              widget: 'select',\\n              option: [\\n                { value: 1, label: '苹果' },\\n                { value: 2, label: '西瓜' },\\n                { value: 3, label: '香蕉' },\\n                { value: 4, label: '东北大冻梨' }\\n              ],\\n            },\\n            {\\n              label: 'switch',\\n              key: 'switch',\\n              widget: 'switch',\\n            },\\n            {\\n              label: 'radio',\\n              widget: 'radio',\\n              key: 'radio',\\n              option: [\\n                { label: '男', value: 'man' },\\n                { label: '女', value: 'girl' }\\n              ],\\n            },\\n            {\\n              label: '多选框',\\n              widget: 'checkbox',\\n              key: 'checkbox',\\n              option: [\\n                { label: '四川菜', value: 'sichuan' },\\n                { label: '湖北菜', value: 'hubei' }\\n              ],\\n            },\\n            {\\n              label: '年月日时分秒',\\n              key: 'dateInputsecond',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                format: 'YYYY-MM-DD HH:mm:ss'\\n              },\\n            },\\n            {\\n              label: '年月日',\\n              key: 'dateInput',\\n              widget: 'dateInput',\\n            },\\n            {\\n              label: '年月',\\n              key: 'monthPicker',\\n              widget: 'monthPicker',\\n            },\\n            {\\n              label: '时分秒',\\n              key: 'timePicker',\\n              widget: 'timePicker',\\n            },\\n            {\\n              label: 'selectMultiple',\\n              key: 'selectMultiple',\\n              widget: 'selectMultiple',\\n              option: option,\\n              widgetProps: {\\n                onSearch: handleSearch.bind(this,'selectMultiple'),\\n                onClear: (value) => console.log('clearvalue', value),\\n                onChange: (value) => console.log('changevalue', value),\\n                onSelect: (value) => console.log('selectvalue', value),\\n                loading: loading,\\n                allowClear: true,\\n                showSearch: true,\\n                maxCount:2\\n              },\\n            },\\n            {\\n              label: '评分',\\n              key: 'rate',\\n              widget: 'rate',\\n            },\\n            // 只读模式下支持读取React.ReactNode\\n            {\\n              label: '自定义组件',\\n              key: 'slider',\\n              widget: 'slider',\\n              readSpan: 2,\\n              span:\\\"24\\\"\\n            },\\n            {\\n              label: '上传组件',\\n              key: 'upload',\\n              widget: 'upload',\\n              span: '24',\\n              readSpan: 3,\\n              widgetProps: {\\n                uploadType: 'card',\\n                multiple: true,\\n                maxNumber: 2,\\n              showFileIcon: {\\n                showPreviewIcon: true,\\n                showRemoveIcon: true,\\n              },\\n            },\\n              rulers: [{ required: true, message: '请上传' }],\\n            },\\n          ]}\\n       />\\n  )\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 通过form api进行表单提交\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState,useRef } from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { Button } from 'uiw'\\nconst Demo = () => {\\n\\n  const form = useForm()\\n\\n    return (\\n     <div>\\n       <ProForm\\n         form={form}\\n         title=\\\"通过form api进行表单提交\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rulers: [\\n                { pattern: new RegExp(/[1][3][0-9]{9}$/), message: \\\"请输入正确手机号\\\" },\\n               ]\\n             },\\n          ]}\\n       />\\n       <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={()=>{\\n          // 触发验证\\n          form.submitvalidate();\\n          // 获取错误信息\\n          const errors = form.getErrors()\\n          if(errors && Object.keys(errors).length > 0 ) return\\n         // 调用请求接口\\n       }}\\n       >\\n        保存\\n      </Button>\\n      <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={()=> form.resetForm() }\\n       >\\n        重置\\n      </Button>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 多表单同时进行提交\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState,useRef } from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { Button } from 'uiw'\\nconst Demo = () => {\\n  const form = useForm()\\n  const form2 = useForm()\\n  return (\\n     <div>\\n       <ProForm\\n         form={form}\\n         title=\\\"表单一\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rulers: [\\n                { required: true, message: '请输入' },\\n                { pattern: new RegExp(/[1][3][0-9]{9}$/), message: \\\"请输入正确手机号\\\" },\\n               ]\\n             },\\n          ]}\\n       />\\n        <div style={{ marginTop:15 }} />\\n        <ProForm\\n         form={form2}\\n         title=\\\"表单二\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input2',\\n               key: 'input2',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rulers: [\\n                { \\n                  validator: (value = '') => {\\n                    if(!value) return false\\n                    return true\\n                  },\\n                  message: \\\"请输入\\\"\\n                },\\n               ]\\n             },\\n          ]}\\n       />\\n       <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={ async ()=>{\\n          // 触发验证\\n          await form?.submitvalidate()\\n          await form2?.submitvalidate()\\n          // 获取错误信息\\n          const errors =  form.getErrors()\\n          const errors2 = form2.getErrors()\\n\\n          if(errors && Object.keys(errors).length > 0 ) return\\n          if(errors2 && Object.keys(errors2).length > 0 ) return\\n          // 获取表单值\\n          const value = form.getFieldValues()\\n          const value2 = form2.getFieldValues()\\n          const params = {...value,...value2}\\n          console.log(\\\"params\\\",params)\\n          // 调用请求接口\\n       }}>\\n        保存\\n      </Button>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 只读模式\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { formatter } from 'uiw'\\nimport React, { useState } from 'react';\\nconst Demo = () => {\\n  const [ queryInfo ] = useState({\\n    input:\\\"周政\\\",\\n    textarea:\\\"周政\\\",\\n    select:\\\"周政\\\",\\n    dateInputsecond: '2021-1-21 23:59:59',\\n    dateInput: '2021-1-21',\\n    monthPicker: '2021-1-21',\\n    timePicker: '2021-1-21 23:59:59',\\n    selectMultiple:[{label:\\\"周政\\\",value:\\\"周政\\\"}],\\n    rate:2\\n  })\\n  const form = useForm()\\n    return (\\n       <ProForm\\n        form={form}\\n         // 表单类型\\n         formType=\\\"pure\\\"\\n         readOnly={true}\\n         title=\\\"只读模式\\\"\\n         // 只读模式下调整 一行的 DescriptionItems 数量,其余参数参考uiw/Descriptions\\n         readOnlyProps={{ column:2 }}\\n         formDatas={\\n           [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               // 只读模式下支持读取React.ReactNode\\n               initialValue: queryInfo?.input,\\n             },\\n             {\\n               label: 'textarea',\\n               key: 'textarea',\\n               widget: 'textarea',\\n               initialValue: queryInfo?.textarea,\\n             },\\n             {\\n               label: 'select',\\n               key: 'select',\\n               widget: 'select',\\n               option:[{label:\\\"周政\\\",value:\\\"周政\\\"}],\\n               initialValue: queryInfo?.select,\\n             },\\n             {\\n              label: 'dateInput',\\n              key: 'dateInputsecond',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                // 年月日时分秒\\n                format: 'YYYY-MM-DD HH:mm:ss'\\n              },\\n              initialValue: queryInfo.dateInputsecond && formatter('YYYY-MM-DD HH:mm:ss', new Date(queryInfo.dateInputsecond))\\n            },\\n            {\\n              label: 'dateInput',\\n              key: 'dateInput',\\n              widget: 'dateInput',\\n              initialValue: queryInfo.dateInput && formatter('YYYY-MM-DD', new Date(queryInfo.dateInput))\\n            },\\n            {\\n              label: 'monthPicker',\\n              key: 'monthPicker',\\n              widget: 'monthPicker',\\n              initialValue: queryInfo.monthPicker && formatter('YYYY-MM', new Date(queryInfo.monthPicker))\\n            },\\n            {\\n              label: 'timePicker',\\n              key: 'timePicker',\\n              widget: 'timePicker',\\n              initialValue: queryInfo.timePicker && new Date(queryInfo.timePicker)\\n            },\\n            {\\n              label: 'selectMultiple',\\n              key: 'selectMultiple',\\n              widget: 'selectMultiple',\\n              option:[{label:\\\"周政\\\",value:\\\"周政\\\"}],\\n              initialValue:queryInfo.selectMultiple || []\\n            },\\n            {\\n              label: 'rate',\\n              key: 'rate',\\n              widget: 'rate',\\n              initialValue:queryInfo.rate\\n            },\\n            {\\n              label: 'upload',\\n              key: 'upload',\\n              widget: 'upload',\\n              widgetProps:{\\n                uploadType: 'card',\\n              },\\n              initialValue: [\\n                {\\n                  dataURL: 'https://avatars2.githubusercontent.com/u/1680273?s=40&v=4',\\n                  name: 'uiw.png',\\n                },\\n              ]\\n            },\\n           ]}\\n       />\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n## Porps  继承uiw-Form\\n\\n| 参数               | 说明                                              | 类型                                                                     | 默认值 |\\n| ------------------ | ------------------------------------------------- | ------------------------------------------------------------------------ | ------ |\\n| formDatas          | 表单项集合                                        | FormItemsProps[]                                                         | []     |\\n| onSubmit           | 提交表单回调 需配合btns，继承uiw/form submit      | (initial: `Record<string, any>`, current: `Record<string, any>`) => void | -      |\\n| onChange           | 表单值变化回调，继承uiw/form onChange             | (initial: `Record<string, any>`, current: `Record<string, any>`) => void | -      |\\n| showSaveButton     | 展示提交按钮                                      | boolean                                                                  | false  |\\n| showResetButton    | 展示重置按钮                                      | boolean                                                                  | false  |\\n| saveButtonProps    | 提交按钮api;继承于uiw/button                      | boolean                                                                  | false  |\\n| resetButtonProps   | 重置按钮api;继承于uiw/button                      | boolean                                                                  | false  |\\n| buttonsContainer   | buttons容器样式(可调整button布局)                 | React.CSSProperties                                                      | -      |\\n| title              | 标题                                              | string                                                                   | -      |\\n| formType           | 表单类型                                          | 'collapse' 或 'card' 或 'pure'                                           | 'card' |\\n| form               | useForm返回值,替换原有submitRef作用可进行表单验证 | UseFormProps 必传                                                              | -      |\\n| readOnly           | 是否是只读模式模式                                | boolean                                                                  | false  |\\n| readOnlyProps      | 只读模式 参考Descriptions参数                     | DescriptionsProps                                                        | {}     |\\n| customWidgetsList  | 可配置自定义组件                                  | { [key: string]: any }                                                   | {}     |\\n| cardProps          | uiw`Card` API                                     | CardProps                                                                | {}     |\\n| collapseProps      | uiw`Collapse` API                                 | CollapseProps                                                            | {}     |\\n| collapsePanelProps | uiw`Collapse.Panel` API                           | CollapsePanelProps                                                       | {}     |\\n\\n## FormItemsProps 继承uiw-FormItem\\n| 参数         | 说明                                                          | 类型                    | 默认值 |\\n| ------------ | ------------------------------------------------------------- | ----------------------- | ------ |\\n| label        | 表单项名称                                                    | string                  | -      |\\n| key          | 表单项key                                                     | string                  | -      |\\n| widget       | 表单项类型                                                    | sring                   | -      |\\n| initialValue | 表单项值，可以是默认值                                        | any 或 any[]            | -      |\\n| option       | 数据化选项内容, type为 radio、checkbox、select 生效           | FormItemsOptionsProps[] | -      |\\n| widgetProps  | 表单组件其余参数,参考uiw表单组件                              | any                     | -      |\\n| hide         | 是否显示                                                      | boolean                 | true   |\\n| span         | 非只读模式下,可以通过指定 24 列中每列的宽度来创建基本网格系统 | string                  | '8'    |\\n| readSpan     | 只读模式下包含列的数量 参考Descriptions.Item                  | number                  | 1      |\\n| required     | 是否必填                                                      | boolean                 | -      |\\n| rulers     | 验证规则                                                      | RulersProps[]                 | -      |\\n\\n\\n## FormItemsOptionsProps\\n| 参数     | 说明     | 类型                     | 默认值 |\\n| -------- | -------- | ------------------------ | ------ |\\n| label    | 名称     | string(必传值)           | -      |\\n| value    | key      | string 或 number(必传值) | -      |\\n| disabled | 是否禁用 | boolean                  | -      |\\n\\n## UseFormProps\\n| 参数     | 说明     | 类型                     | 默认值 |\\n| -------- | -------- | ------------------------ | ------ |\\n| formRef    | 表单事件和值集合ref      | { [key: string]: any } | -      |\\n| submitvalidate | 表单验证 | ()=>void | - | \\n| resetForm | 重置表单 | ()=>void | - |  \\n| getFieldValues | 获取表单值 | ()=>void | - |  \\n| getErrors | 获取表单错误 | ()=>void | - |      \\n\\n## RulersProps\\n| 参数     | 说明     | 类型                     | 默认值 |\\n| -------- | -------- | ------------------------ | ------ |\\n| message    | 验证提示消息     | string           | -      |\\n| pattern    | 验证正则      | RegExp | -      |\\n| validator | 自定义验证规则 | (value: any | any[]) => boolean | - | \\n| required | 是否必填 | boolean | - | \\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\";"],"names":[],"sourceRoot":""}