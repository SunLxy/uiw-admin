{"version":3,"file":"static/js/523.025c0abf.chunk.js","mappings":"+GAAA","sources":["../../../packages/components/src/ProForm/README.md"],"sourcesContent":["export default \"# ProForm 表单\\n\\n基于[uiw From](https://uiwjs.github.io/#/components/form)封装。\\n- [x] 支持原uiw/Form的提交方式并可以更简洁的生成表单\\n- [x] 支持多个表单同时提交\\n- [x] 支持动态添加表单\\n- [x] 支持只读模式表单\\n\\n## 何时使用\\n- 用于创建一个实体或收集信息。\\n- 需要对输入的数据类型进行校验时。\\n\\n<!--ProForm-->\\n## 表单类型\\n> 卡片表单类型\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nconst Demo = () => {\\n    return (\\n     <div>\\n       <ProForm\\n         title=\\\"卡片表单\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n             },\\n          ]}\\n       />\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n> 折叠表单类型\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nconst Demo = () => {\\n    return (\\n     <div>\\n       <ProForm\\n         title=\\\"折叠表单\\\"\\n         formType=\\\"collapse\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n             },\\n          ]}\\n       />\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n> 纯表单类型下title将不再展示\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nconst Demo = () => {\\n    return (\\n     <div>\\n       <ProForm\\n         formType=\\\"pure\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n             },\\n          ]}\\n       />\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 基本使用\\n> 与uiw/form使用保持一致\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { ProForm } from '@uiw-admin/components'\\nimport { Button,Notify,Slider } from 'uiw'\\nconst Demo = () => {\\n  const [state,setState] = React.useState({})\\n   const [option] = React.useState([\\n    { value: 1, label: '苹果' },\\n    { value: 2, label: '西瓜' },\\n    { value: 3, label: '香蕉' },\\n    { value: 4, label: '东北大冻梨' },\\n    { value: 5, label: '香蕉' },\\n    { value: 6, label: '葡萄' },\\n    { value: 6, label: '哈密瓜' },\\n   ])\\n   const [loading, setLoading] = React.useState(false)\\n   // 模拟搜索\\n  const handleSearch = ( type = '' , name = '' ) => {\\n    if (type === 'searchSelect') {\\n      setLoading(true)\\n      setTimeout(() => {\\n        setLoading(false)\\n      }, 2000)\\n    }\\n  }\\n    return (\\n    <>\\n       <ProForm\\n         // 表单类型\\n         formType=\\\"collapse\\\"\\n         title=\\\"基本使用(与uiw/form使用保持一致)\\\"\\n         // 自定义组件\\n         customWidgetsList={{\\n          slider: Slider,\\n        }}\\n         // 是否展示uiw/form提交按钮\\n         showSaveButton\\n         // 是否展示uiw/form重置按钮\\n         showResetButton\\n         // 提交后验证\\n         onSubmit={(initial, current) => {\\n          const errorObj = {};\\n          if (!current?.input) {\\n            errorObj.input = 'input不能为空';\\n          }\\n          if (Object.keys(errorObj).length > 0) {\\n            const err = new Error();\\n            err.filed = errorObj;\\n            Notify.error({ title: '提交失败！' });\\n            throw err;\\n          }\\n          setState(current)\\n          // 调用请求接口\\n        }}\\n         formDatas={[\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               help:\\\"input不能为空\\\"\\n             },\\n             {\\n              label: 'textarea',\\n              key: 'textarea',\\n              widget: 'textarea',\\n             },\\n             {\\n              label: 'select',\\n              key: 'select',\\n              widget: 'select',\\n              option: [\\n                { value: 1, label: '苹果' },\\n                { value: 2, label: '西瓜' },\\n                { value: 3, label: '香蕉' },\\n                { value: 4, label: '东北大冻梨' }\\n              ],\\n            },\\n            {\\n              label: 'switch',\\n              key: 'switch',\\n              widget: 'switch',\\n            },\\n            {\\n              label: 'radio',\\n              widget: 'radio',\\n              key: 'radio',\\n              option: [\\n                { label: '男', value: 'man' },\\n                { label: '女', value: 'girl' }\\n              ],\\n            },\\n            {\\n              label: '多选框',\\n              widget: 'checkbox',\\n              key: 'checkbox',\\n              option: [\\n                { label: '四川菜', value: 'sichuan' },\\n                { label: '湖北菜', value: 'hubei' }\\n              ],\\n            },\\n            {\\n              label: '年月日时分秒',\\n              key: 'dateInputsecond',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                format: 'YYYY-MM-DD HH:mm:ss'\\n              },\\n            },\\n            {\\n              label: '年月日',\\n              key: 'dateInput',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                format: 'YYYY-MM-DD'\\n              },\\n            },\\n            {\\n              label: '年月',\\n              key: 'monthPicker',\\n              widget: 'monthPicker',\\n               widgetProps: {\\n                format: 'YYYY-MM'\\n              },\\n            },\\n            {\\n              label: '时分秒',\\n              key: 'timePicker',\\n              widget: 'timePicker',\\n            },\\n            {\\n              label: 'searchSelect',\\n              key: 'searchSelect',\\n              widget: 'searchSelect',\\n              option: option,\\n              widgetProps: {\\n                mode:\\\"multiple\\\",\\n                onSearch: handleSearch.bind(this,'searchSelect'),\\n                onChange: (value) => console.log('changevalue', value),\\n                onSelect: (value) => console.log('selectvalue', value),\\n                loading: loading,\\n                allowClear: true,\\n                showSearch: true,\\n                style:{ width:\\\"100%\\\" }\\n              },\\n            },\\n            {\\n              label: '评分',\\n              key: 'rate',\\n              widget: 'rate',\\n            },\\n            // 只读模式下支持读取React.ReactNode\\n            {\\n              label: '自定义组件',\\n              key: 'slider',\\n              widget: 'slider',\\n              readSpan: 2,\\n              span:\\\"24\\\"\\n            },\\n            {\\n              label: '上传组件',\\n              key: 'upload',\\n              widget: 'upload',\\n              span: '24',\\n              readSpan: 3,\\n              widgetProps: {\\n                uploadType: 'card',\\n                multiple: true,\\n                maxNumber: 2,\\n              showFileIcon: {\\n                showPreviewIcon: true,\\n                showRemoveIcon: true,\\n              },\\n            },\\n              rules: [{ required: true, message: '请上传' }],\\n            },\\n          ]}\\n       />\\n        <div style={{ maxWidth: 200 }}>\\n          <pre style={{ padding: '10px 0 0 10px' }}>{JSON.stringify(state, null, 2)}</pre>\\n        </div>\\n    </>\\n  )\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 通过form props\\n> (提交,重置,设置)\\n> 与uiw/form提交不同,我们也可以通过传递rules进行提交前的表单校验(支持正则,required,回调验证)\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { Button } from 'uiw'\\nconst Demo = () => {\\n  const [state,setState] = React.useState({})\\n  const form = useForm()\\n\\n    return (\\n     <div>\\n       <ProForm\\n         form={form}\\n         title=\\\"通过form api进行表单提交\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rules: [\\n                { pattern: new RegExp(/[1][3][0-9]{9}$/), message: \\\"请输入正确手机号\\\" },\\n               ]\\n             },\\n          ]}\\n       />\\n       <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={async()=>{\\n          // 触发验证\\n          await form.submitvalidate();\\n          // 获取错误信息\\n          const errors = form.getError()\\n          if(errors && Object.keys(errors).length > 0 ) return\\n          const value = form.getFieldValues?.()\\n          setState(value)\\n         // 调用请求接口\\n       }}\\n       >\\n        保存\\n      </Button>\\n      <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={()=>{\\n          form.resetForm()\\n          setState({})\\n        }}\\n       >\\n        重置\\n      </Button>\\n       <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={()=> {\\n          form.setFields({input:'1234'})\\n          setState({input:'1234'})\\n        } }\\n       >\\n        设置\\n      </Button>\\n      <div style={{ maxWidth: 500 }}>\\n        <pre style={{ padding: '10px 0 0 10px' }}>{JSON.stringify(state, null, 2)}</pre>\\n      </div>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## 多个表单\\n> 基础提交,我们提供了submitvalidate;getError;getFieldValues;validateFieldsAndGetValue;setFields;resetForm等表单实例方法\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { Button } from 'uiw'\\nconst Demo = () => {\\n  const [state,setState] = React.useState({})\\n  const form = useForm()\\n  const form2 = useForm()\\n\\n  return (\\n     <div>\\n       <ProForm\\n         form={form}\\n         title=\\\"表单一\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rules: [\\n                { required: true, message: '请输入' },\\n                { pattern: new RegExp(/[1][3][0-9]{9}$/), message: \\\"请输入正确手机号\\\" },\\n               ]\\n             },\\n          ]}\\n       />\\n        <div style={{ marginTop:15 }} />\\n        <ProForm\\n         formType=\\\"pure\\\"\\n         form={form2}\\n         title=\\\"表单二\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input2',\\n               key: 'input2',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rules: [\\n                { \\n                  validator: (value = '') => {\\n                    if(!value) return false\\n                    return true\\n                  },\\n                  message: \\\"请输入\\\"\\n                },\\n               ]\\n             },\\n          ]}\\n       />\\n       <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={ async ()=>{\\n          // 触发验证\\n          await form?.submitvalidate()\\n          await form2?.submitvalidate()\\n          // 获取错误信息\\n          const errors = form.getError()\\n          const errors2 = form2.getError()\\n\\n          if(errors && Object.keys(errors).length > 0 ) return\\n          if(errors2 && Object.keys(errors2).length > 0 ) return\\n          // 获取表单值\\n          const value = form.getFieldValues?.()\\n          const value2 = form2.getFieldValues?.()\\n          const params = {...value,...value2}\\n          setState(params)\\n          // 调用请求接口\\n       }}>\\n         保存\\n      </Button>\\n      <div style={{ maxWidth: 500 }}>\\n        <pre style={{ padding: '10px 0 0 10px' }}>{JSON.stringify(state, null, 2)}</pre>\\n      </div>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n> promise提交(通过validateFieldsAndGetValue方法先验证后获取值)\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { Button,Row,Col } from 'uiw'\\nconst Demo = () => {\\n  const [state,setState] = React.useState({})\\n  const form = useForm()\\n  const form2 = useForm()\\n\\n  const asyncAwaitFormList = (arr=[]) => {\\n    return (\\n      arr && arr.length>0 &&  Promise.all(arr).then((vals) =>{\\n        return vals\\n      })\\n    )\\n  };\\n\\n  return (\\n     <div>\\n       <ProForm\\n         form={form}\\n         title=\\\"表单一\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rules: [\\n                { required: true, message: '请输入' },\\n                { pattern: new RegExp(/[1][3][0-9]{9}$/), message: \\\"请输入正确手机号\\\" },\\n               ]\\n             },\\n          ]}\\n       />\\n        <div style={{ marginTop:15 }} />\\n        <ProForm\\n         formType=\\\"pure\\\"\\n         form={form2}\\n         title=\\\"表单二\\\"\\n         formType=\\\"card\\\"\\n         formDatas={ [\\n             {\\n               label: 'input2',\\n               key: 'input2',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {},\\n               span:\\\"24\\\",\\n               rules: [\\n                { \\n                  validator: (value = '') => {\\n                    if(!value) return false\\n                    return true\\n                  },\\n                  message: \\\"请输入\\\"\\n                },\\n               ]\\n             },\\n          ]}\\n       />\\n       <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={ async ()=>{\\n          // 触发验证获取值\\n          const values = await asyncAwaitFormList([form?.validateFieldsAndGetValue(),form2?.validateFieldsAndGetValue()])\\n          let obj = {};\\n          values.forEach((item) => Object.assign(obj, item));\\n          setState(obj)\\n          // 调用请求接口\\n       }}>\\n         保存\\n      </Button>\\n      <div style={{ maxWidth: 500 }}>\\n        <pre style={{ padding: '10px 0 0 10px' }}>{JSON.stringify(state, null, 2)}</pre>\\n      </div>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n## 动态添加表单\\n> uiw/form方式提交\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState,useRef } from 'react';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { Button,Card } from 'uiw'\\nconst Demo = () => {\\n  const form = useForm()\\n  const formRefList = useRef([])\\n  const [state,setState] = React.useState([])\\n  const [items,setItems] = useState([])\\n  // 过滤删除为null的ref\\n  const formList = formRefList?.current.filter(n => n) || []\\n\\n  const handleAddFormItems = (type,idx)=>{\\n    if(type==='add'){\\n       items.push([\\n        {\\n          label: '司机手机号',\\n          key: 'phone',\\n          widget: 'input',\\n          initialValue: '',\\n        },\\n      ])\\n    }\\n    if(type==='delete'){\\n      items.splice(idx,1)\\n      // formList[idx].setFields({phone:''})\\n    }\\n    setItems([...items])\\n  }\\n\\n  return (\\n     <div>\\n      {items.map((item, idx) => {\\n          return (\\n           <Card \\n            title={`表单${idx + 1}`} \\n            key={idx} \\n            style={{ marginBottom:10 }} \\n            extra={<span onClick={handleAddFormItems.bind(this,'delete',idx)}>删除</span>}\\n            >\\n             <ProForm\\n              ref={(e) =>(formRefList.current[idx] = e)}\\n              // 表单类型\\n              formType=\\\"pure\\\"\\n              form={form}\\n              cardProps={{\\n                noHover: true,\\n              }}\\n              // 更新表单的值\\n              buttonsContainer={{ justifyContent: 'flex-start' }}\\n              formDatas={item}\\n              // 提交后验证\\n              onSubmit={(initial, current) => {\\n                const errorObj = {};\\n                if (!current?.phone) {\\n                  errorObj.phone = 'input不能为空';\\n                }\\n                if (Object.keys(errorObj).length > 0) {\\n                const err = new Error();\\n                err.filed = errorObj;\\n                throw err;\\n              }\\n              // 获取值\\n              const params = (formList.map(value => ({ ...value?.getFieldValues() }))) || [];\\n              setState(params)\\n              // 调用请求接口\\n            }}\\n            />\\n          </Card>\\n          )\\n        })}\\n       <Button \\n        style={{ marginTop:10,width:80 }}  \\n        type=\\\"primary\\\"  \\n        onClick={handleAddFormItems.bind(this,'add')}>\\n         新增\\n        </Button>\\n       <Button \\n        style={{ marginTop:10,width:80 }} \\n        type=\\\"primary\\\" \\n        onClick={()=>{\\n          // 触发验证\\n          formList.forEach(item => item.submitvalidate())\\n        }}>\\n        保存\\n      </Button>\\n      <div style={{ maxWidth: 500 }}>\\n        <pre style={{ padding: '10px 0 0 10px' }}>{JSON.stringify(state, null, 2)}</pre>\\n      </div>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n## 只读模式\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { ProForm,useForm } from '@uiw-admin/components'\\nimport { formatter } from 'uiw'\\nimport React, { useState } from 'react';\\nconst Demo = () => {\\n  const [ queryInfo ] = useState({\\n    input:\\\"周政\\\",\\n    textarea:\\\"周政\\\",\\n    select:\\\"周政\\\",\\n    dateInputsecond: '2021-1-21 23:59:59',\\n    dateInput: '2021-1-21',\\n    monthPicker: '2021-1',\\n    timePicker: '2021-1-21 22:59:59',\\n    searchSelect:[\\\"周政\\\"],\\n    rate:2\\n  })\\n  const form = useForm()\\n    return (\\n       <ProForm\\n        form={form}\\n         readOnly={true}\\n         title=\\\"只读模式\\\"\\n         formType=\\\"pure\\\"\\n         // 只读模式下调整 一行的 DescriptionItems 数量,其余参数参考uiw/Descriptions\\n         readOnlyProps={{ column:2 }}\\n         formDatas={\\n           [\\n             {\\n               label: 'input',\\n               key: 'input',\\n               widget: 'input',\\n               // 只读模式下支持读取React.ReactNode\\n               initialValue: queryInfo?.input,\\n             },\\n             {\\n               label: 'textarea',\\n               key: 'textarea',\\n               widget: 'textarea',\\n               initialValue: queryInfo?.textarea,\\n             },\\n             {\\n               label: 'select',\\n               key: 'select',\\n               widget: 'select',\\n               option:[{label:\\\"周政\\\",value:\\\"周政\\\"}],\\n               initialValue: queryInfo?.select,\\n             },\\n             {\\n              label: 'dateInput',\\n              key: 'dateInputsecond',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                // 年月日时分秒\\n                format: 'YYYY-MM-DD HH:mm:ss'\\n              },\\n              initialValue: queryInfo?.dateInputsecond\\n            },\\n            {\\n              label: 'dateInput',\\n              key: 'dateInput',\\n              widget: 'dateInput',\\n              widgetProps: {\\n                // 年月日\\n                format: 'YYYY-MM-DD'\\n              },\\n              initialValue: queryInfo?.dateInput\\n            },\\n            {\\n              label: 'monthPicker',\\n              key: 'monthPicker',\\n              widget: 'monthPicker',\\n              widgetProps: {\\n                // 年月\\n                format: 'YYYY-MM'\\n              },\\n              initialValue: queryInfo?.monthPicker\\n            },\\n            {\\n              label: 'timePicker',\\n              key: 'timePicker',\\n              widget: 'timePicker',\\n              initialValue: queryInfo.timePicker && new Date(queryInfo.timePicker)\\n            },\\n            {\\n              label: 'searchSelect',\\n              key: 'searchSelect',\\n              widget: 'searchSelect',\\n              widgetProps:{\\n                mode:\\\"multiple\\\",\\n              },\\n              option:[{label:\\\"周政\\\",value:\\\"周政\\\"}],\\n              initialValue:queryInfo.searchSelect || []\\n            },\\n            {\\n              label: 'rate',\\n              key: 'rate',\\n              widget: 'rate',\\n              initialValue:queryInfo.rate\\n            },\\n            {\\n              label: 'upload',\\n              key: 'upload',\\n              widget: 'upload',\\n              widgetProps:{\\n                uploadType: 'card',\\n              },\\n              initialValue: [\\n                {\\n                  dataURL: 'https://avatars2.githubusercontent.com/u/1680273?s=40&v=4',\\n                  name: 'uiw.png',\\n                },\\n              ]\\n            },\\n           ]}\\n       />\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n## Props\\n> 继承uiw-Form\\n\\n| 参数               | 说明                                              | 类型                                                                     | 默认值 |\\n| ------------------ | ------------------------------------------------- | ------------------------------------------------------------------------ | ------ |\\n| formDatas          | 表单项集合                                        | FormItemsProps[]                                                         | []     |\\n| onSubmit           | 提交表单回调 需配合btns，继承uiw/form submit      | (initial: `Record<string, any>`, current: `Record<string, any>`) => void | -      |\\n| onChange           | 表单值变化回调，继承uiw/form onChange             | (initial: `Record<string, any>`, current: `Record<string, any>`) => void | -      |\\n| onSubmitError           | 调用 onSubmit 抛出的任何错误。从字段名称返回对象映射。 继承uiw/form onSubmitError             | (error:`any`) => void |  -     |\\n| showSaveButton     | 展示提交按钮                                      | boolean                                                                  | false  |\\n| showResetButton    | 展示重置按钮                                      | boolean                                                                  | false  |\\n| saveButtonProps    | 提交按钮api;继承于uiw/button                      | boolean                                                                  | false  |\\n| resetButtonProps   | 重置按钮api;继承于uiw/button                      | boolean                                                                  | false  |\\n| buttonsContainer   | buttons容器样式(可调整button布局)                 | React.CSSProperties                                                      | -      |\\n| title              | 标题                                              | string                                                                   | -      |\\n| formType           | 表单类型                                          | 'collapse' 或 'card' 或 'pure'                                           | 'card' |\\n| form               | useForm返回值,替换原有submitRef作用可进行表单验证 | UseFormProps 必传                                                              | -      |\\n| readOnly           | 是否是只读模式模式                                | boolean                                                                  | false  |\\n| readOnlyProps      | 只读模式 参考Descriptions参数                     | DescriptionsProps                                                        | {}     |\\n| customWidgetsList  | 可配置自定义组件                                  | { [key: string]: any }                                                   | {}     |\\n| cardProps          | uiw`Card` API                                     | CardProps                                                                | {}     |\\n| collapseProps      | uiw`Collapse` API                                 | CollapseProps                                                            | {}     |\\n| collapsePanelProps | uiw`Collapse.Panel` API                           | CollapsePanelProps                                                       | {}     |\\n\\n### FormItemsProps\\n> 继承uiw-FormItem\\n\\n| 参数         | 说明                                                          | 类型                    | 默认值 |\\n| ------------ | ------------------------------------------------------------- | ----------------------- | ------ |\\n| label        | 表单项名称                                                    | string                  | -      |\\n| key          | 表单项key                                                     | string                  | -      |\\n| widget       | 表单项类型                                                    | sring                   | -      |\\n| initialValue | 表单项值，可以是默认值                                        | any 或 any[]            | -      |\\n| option       | 数据化选项内容, widget为 radio、checkbox、select 生效           | OptionsProps[] | -      |\\n| widgetProps  | 表单组件其余参数,参考uiw表单组件                              | any                     | -      |\\n| hide         | 是否显示                                                      | boolean                 | true   |\\n| span         | 非只读模式下,可以通过指定 24 列中每列的宽度来创建基本网格系统 | string                  | '8'    |\\n| readSpan     | 只读模式下包含列的数量 参考Descriptions.Item                  | number                  | 1      |\\n| required     | 是否必填                                                      | boolean                 | -      |\\n| rules     | 验证规则                                                      | RulesProps[]                 | -      |\\n\\n### RulesProps\\n| 参数     | 说明     | 类型                     | 默认值 |\\n| -------- | -------- | ------------------------ | ------ |\\n| message    | 验证提示消息     | string           | -      |\\n| pattern    | 验证正则      | RegExp | -      |\\n| validator | 自定义验证规则 | (value: any | any[]) => boolean | - | \\n| required | 是否必填 | boolean | - | \\n\\n### OptionsProps\\n| 参数     | 说明     | 类型                     | 默认值 |\\n| -------- | -------- | ------------------------ | ------ |\\n| label    | 名称     | string(必传值)           | -      |\\n| value    | key      | string 或 number(必传值) | -      |\\n| disabled | 是否禁用 | boolean                  | -      |\\n\\n## useForm\\n\\n### response\\n| 参数     | 说明     | 类型                     | 默认值 |\\n| -------- | -------- | ------------------------ | ------ |\\n| submitvalidate | 表单验证 | ()=>void | - | \\n| resetForm | 重置表单值 | ()=>void | - | \\n| onSubmit | 表单提交 | ()=>void | - |   \\n| getFieldValues | 获取表单值 | ()=>void | - |  \\n| getError | 获取表单错误 | ()=>void | - |  \\n| setFields | 设置表单的值 | ()=>void | [] |      \\n| validateFieldsAndGetValue | 验证并获取值 | ()=>Promise<any> | [] |   \\n\\n## 注意\\n> [继承于uiw/Form,请参考uiw/From以及表单组件](https://uiwjs.github.io/#/components/form),\\n 默认集成了`Input`,`Checkbox`,`Switch`,`Textarea`,`DateInput`,`TimePicker`,\\n `MonthPicker`,`SearchSelect`,`Select`,`Radio`,`selectMultiple`,`Rate`,`Upload`。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\";"],"names":[],"sourceRoot":""}