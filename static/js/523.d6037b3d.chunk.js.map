{"version":3,"file":"static/js/523.d6037b3d.chunk.js","mappings":"+GAAA","sources":["../../../packages/components/src/ProForm/README.md"],"sourcesContent":["export default \"# 基于uiw-form封装的业务表单\\n\\n<!--ProForm-->\\n\\n### 基本使用(与uiw/form使用保持一致)\\n```js\\nimport { ProForm } from '@uiw-admin/components'\\nimport React, { useState } from 'react';\\nimport { Button } from 'uiw'\\nconst Demo = () => {\\n    return (\\n       <ProForm\\n         formType=\\\"card\\\"\\n         title=\\\"基础信息\\\"\\n         showSaveButton\\n         showResetButton\\n         onSubmit={(initial, current) => {\\n          const errorObj: any = {};\\n          if (!current?.lastName) {\\n            errorObj.lastName = '名字不能为空';\\n          }\\n          if (Object.keys(errorObj).length > 0) {\\n            const err: any = new Error();\\n            err.filed = errorObj;\\n            Notify.error({ title: '提交失败！' });\\n            throw err;\\n          }\\n          // 调用请求接口\\n        }}\\n         onChange={(initial: any, current: any) => {} )}\\n         formDatas={\\n           [\\n             {\\n               label: '姓氏',\\n               key: 'firstName',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {}\\n               // 单独一行\\n               span:\\\"24\\\"\\n             }\\n           ]}\\n       />\\n  );\\n}\\n```\\n\\n### 通过submitRef进行表单提交\\n```js\\nimport { ProForm } from '@uiw-admin/components'\\nimport React, { useState,useRef } from 'react';\\nimport { Button } from 'uiw'\\nconst Demo = () => {\\n\\n  const submitRef = useRef<any>()\\n\\n    return (\\n      <React.Fragment>\\n       <ProForm\\n         submitRef={submitRef}\\n         title=\\\"基础信息\\\"\\n         onSubmit={(initial, current) => {\\n          const errorObj: any = {};\\n          if (!current?.lastName) {\\n            errorObj.lastName = '名字不能为空';\\n          }\\n          if (Object.keys(errorObj).length > 0) {\\n            const err: any = new Error();\\n            err.filed = errorObj;\\n            Notify.error({ title: '提交失败！' });\\n            throw err;\\n          }\\n          // 调用请求接口\\n        }}\\n         formDatas={\\n           [\\n             {\\n               label: '姓氏',\\n               key: 'firstName',\\n               widget: 'input',\\n               initialValue: '',\\n               widgetProps: {}\\n             }\\n           ]}\\n       />\\n       <Button onClick={()=>submitRef?.current?.click()}>保<Button>\\n      </React.Fragment>\\n  );\\n}\\n```\\n\\n### 只读模式\\n```js\\nimport { ProForm } from '@uiw-admin/components'\\nimport React, { useState } from 'react';\\nconst Demo = () => {\\n  const [ isView ] = useState( true )\\n    return (\\n       <ProForm\\n         readOnly={isView}\\n         title=\\\"基础信息\\\"\\n         // 只读模式下调整 一行的 DescriptionItems 数量,其余参数参考uiw/Descriptions\\n         readOnlyProps={{ columns:3 }}\\n         formDatas={\\n           [\\n             {\\n               label: '姓名',\\n               key: 'firstName',\\n               widget: 'input',\\n               // 只读模式下支持读取React.ReactNode\\n               initialValue: <div>周政</div> ,\\n               // 只读模式下单独一行\\n               readSpan:3\\n             },\\n           ]}\\n       />\\n  );\\n}\\n```\\n\\n\\n## Porps\\n\\n| 参数 | 说明\\t| 类型\\t| 默认值 |\\n| --  | -- | -- | -- |\\n| formDatas | 表单项集合\\t| FormItemsProps[]\\t\\t| [] |\\n| onSubmit | 提交表单回调 需配合btns，继承uiw/form submit\\t| (initial: Record<string, any>, current: Record<string, any>) => void\\t\\t| - |\\n| onChange | 表单值变化回调，继承uiw/form onChange\\t| (initial: Record<string, any>, current: Record<string, any>) => void\\t| - |\\n| showSaveButton | 展示提交按钮\\t|  boolean\\t\\t| false |\\n| showResetButton | 展示重置按钮\\t|  boolean\\t\\t| false |\\n| saveButtonProps | 提交按钮api;继承于uiw/button\\t|  boolean\\t\\t| false |\\n| resetButtonProps | 重置按钮api;继承于uiw/button\\t|  boolean\\t\\t| false |\\n| buttonsContainer  | buttons容器样式(可调整button布局)\\t| React.CSSProperties\\t\\t| - |\\n| title | 标题\\t  | string 或 React.ReactNode\\t\\t| - |\\n| formType | 表单类型\\t  | 'collapse' 或 'card' 或 'pure'\\t\\t| 'card' |\\n| submitRef | 获取表单提交事件ref\\t  |  any\\t\\t| - |\\n| readOnly | 是否是只读模式模式\\t  |  boolean\\t\\t| false |\\n| readOnlyProps | 只读模式 参考Descriptions参数\\t  |  DescriptionsProps\\t\\t| {} |\\n\\n## FormItemsProps\\n| 参数 | 说明\\t| 类型\\t| 默认值 |\\n| --  | -- | -- | -- |\\n| label| 表单项名称 | string\\t| - |\\n| key| 表单项key| string\\t| - |\\n| widget| 表单项类型| typeof commonWidgetsList\\t| - |\\n| initialValue| 表单项值，可以是默认值| any 或 any[]\\t| - |\\n| option| 数据化选项内容, type为 radio、checkbox、select 生效| FormItemsOptionsProps[]| - |\\n| widgetProps| 表单组件其余参数,参考uiw表单组件| any|- |\\n| hide| 是否显示| boolean| true |\\n| span| 非只读模式下,可以通过指定 24 列中每列的宽度来创建基本网格系统| string| '8' |\\n| readSpan| 只读模式下包含列的数量 参考Descriptions.Item| number | 1 |\\n| required| 是否必填| boolean | - |\\n\\n\\n## FormItemsOptionsProps\\n| 参数 | 说明\\t| 类型\\t| 默认值 |\\n| --  | -- | -- | -- |\\n| label| 名称 | string(必传值)\\t| - |\\n| value| key | string 或 number(必传值)\\t| - |\\n| disabled| 是否禁用 | boolean\\t| - |\\n\\n## 注意\\n- [继承于uiw/form,请参考uiw/from以及表单组件](https://uiwjs.github.io/#/components/from)\\n- 组件默认集成了Input,Checkbox,Switch,Textarea,DateInput,TimePicker,MonthPicker,SearchSelect,Select,Radio。可通过配置widget注册自定义组件\";"],"names":[],"sourceRoot":""}