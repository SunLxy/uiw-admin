{"version":3,"file":"361.js","mappings":"0LAIMA,EAAqB,CACzBC,KAAM,OACNC,MAAO,CACLC,eAAe,EACfC,UAAW,GACXC,UAAW,GACXC,QAAQ,GAEVC,SAAU,CACRC,YAAa,SAACN,EAAYO,GAAb,eAAC,UACTP,GACAO,KAGPC,QAAS,SAACC,GAAD,MAAoB,CACrBC,OADqB,SACdH,GAAe,OAAD,8GACnBI,EAAMF,EADa,UAENC,EAAAA,EAAAA,IAAOH,GAFD,OAGP,OADZK,EAFmB,QAGhBC,OACPC,EAAAA,GAAAA,QAAe,CAAEC,MAAOH,EAAKI,UAC7BL,EAAIb,KAAKmB,SALc,8CAQrBC,OATqB,SASdX,GAAe,OAAD,8GACnBI,EAAMF,EADa,UAENS,EAAAA,EAAAA,IAAOX,GAFD,OAGP,OADZK,EAFmB,QAGhBC,OACPC,EAAAA,GAAAA,QAAe,CAAEC,MAAOH,EAAKI,UAC7BL,EAAIb,KAAKmB,SALc,8CAQrBE,WAjBqB,SAiBVZ,GAAe,OAAD,8GACvBI,EAAMF,EADiB,UAEVU,EAAAA,EAAAA,IAAWZ,GAFD,OAGX,OADZK,EAFuB,QAGpBC,MACPF,EAAIb,KAAKQ,YAAY,CACnBL,eAAe,EACfE,UAAWS,EAAKA,MAAQ,KANC,8CAU/BK,MA3B2B,WA4BbR,EACRX,KAAKQ,YAAY,CACnBL,eAAe,EACfC,UAAW,GACXC,UAAW,GACXC,QAAQ,QAMhB,a,qJCtDA,SAASe,EAAWC,GAClB,OAAOC,EAAAA,EAAAA,GAAQ,uBAAwB,CACrCC,OAAQ,OACRC,MAAK,UAAMH,KAGd,SAASV,EAAOU,GACf,OAAOC,EAAAA,EAAAA,GAAQ,mBAAoB,CACjCC,OAAQ,OACRC,MAAK,UAAMH,KAKf,SAASF,EAAOE,GACd,OAAOC,EAAAA,EAAAA,GAAQ,mBAAoB,CACjCC,OAAQ,OACRC,MAAK,UAAMH,KAIf,IAAMI,EAAa","sources":["webpack://@examples/base/./src/models/demo.ts","webpack://@examples/base/./src/servers/demo.ts"],"sourcesContent":["import { ModelDefault, Dispatch } from '@uiw-admin/models';\nimport { insert, selectById, update } from '../servers/demo'\nimport { Notify } from 'uiw'\n\nconst demo: ModelDefault = {\n  name: \"demo\",\n  state: {\n    drawerVisible: false,\n    tableType: '',\n    queryInfo: {},\n    isView: false\n  },\n  reducers: {\n    updateState: (state: any, payload: any) => ({\n      ...state,\n      ...payload,\n    }),\n  },\n  effects: (dispatch: any) => ({\n    async insert(payload: any) {\n      const dph = dispatch as Dispatch;\n      const data = await insert(payload);\n      if (data.code === 200) {\n        Notify.success({ title: data.message });\n        dph.demo.clean()\n      }\n    },\n    async update(payload: any) {\n      const dph = dispatch as Dispatch;\n      const data = await update(payload);\n      if (data.code === 200) {\n        Notify.success({ title: data.message });\n        dph.demo.clean()\n      }\n    },\n    async selectById(payload: any) {\n      const dph = dispatch as Dispatch;\n      const data = await selectById(payload);\n      if (data.code === 200) {\n        dph.demo.updateState({\n          drawerVisible: true,\n          queryInfo: data.data || {},\n        });\n      }\n    },\n    clean() {\n      const dph = dispatch as Dispatch;\n      dph.demo.updateState({\n        drawerVisible: false,\n        tableType: '',\n        queryInfo: {},\n        isView: false\n      });\n    }\n  }),\n};\n\nexport default demo","import { request } from '@uiw-admin/utils';\n\n// /api/demo/selectById\nfunction selectById(params: { id: string }) {\n  return request('/api/demo/selectById', {\n    method: 'POST',\n    body: { ...params },\n  });\n}\n function insert(params: any) {\n  return request('/api/demo/insert', {\n    method: 'POST',\n    body: { ...params },\n  });\n}\n\n// /api/demo/edit\nfunction update(params: any) {\n  return request('/api/demo/update', {\n    method: 'POST',\n    body: { ...params },\n  });\n}\n\nconst selectPage = '/api/demo/selectPage'\n\nexport{\n  selectById,\n  update,\n  insert,\n  selectPage\n}"],"names":["demo","name","state","drawerVisible","tableType","queryInfo","isView","reducers","updateState","payload","effects","dispatch","insert","dph","data","code","Notify","title","message","clean","update","selectById","params","request","method","body","selectPage"],"sourceRoot":""}