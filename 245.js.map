{"version":3,"file":"245.js","mappings":"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","sources":["webpack://@examples/base/../../packages/components/src/Skeleton/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/hooks.ts","webpack://@examples/base/../../packages/components/src/ProTable/BaseTable.tsx","webpack://@examples/base/../../packages/components/src/ProTable/widgets/Select.tsx","webpack://@examples/base/../../packages/components/src/ProTable/widgets/Radio.tsx","webpack://@examples/base/../../packages/components/src/ProTable/BaseForm.tsx","webpack://@examples/base/../../packages/components/src/ProTable/index.tsx","webpack://@examples/base/../../packages/components/src/ProTable/useTable.ts","webpack://@examples/base/../../packages/components/src/ProDrawer/index.tsx","webpack://@examples/base/../../packages/components/src/ProForm/formdom.tsx","webpack://@examples/base/../../packages/components/src/ProForm/index.tsx"],"sourcesContent":["import React from 'react';\nimport { Loader } from 'uiw';\n\ninterface SkeletonProps {\n  children: React.ReactNode;\n  loading?: boolean;\n}\n\nconst Skeleton: React.FC<SkeletonProps> = ({ children, loading = false }) => {\n  return (\n    <Loader\n      loading={loading}\n      style={{ display: 'block', }}\n      // fullscreen={true}\n      bgColor=\"rgba(255, 255, 255, 0.4)\"\n    >\n      <>{children}</>\n    </Loader>\n  );\n};\n\nexport default Skeleton;\n","import {\n  useContext,\n  createContext,\n} from 'react';\n\nexport const StoreCtx = createContext({});\n\n\nexport const useStore = () => {\n  return useContext(StoreCtx);\n};\n\n\n\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  useMemo,\n} from 'react';\nimport useSWR from 'swr';\nimport { Table, Pagination, TableColumns } from 'uiw';\nimport { request } from '@uiw-admin/utils';\nimport { useStore } from './hooks';\nimport { Fields } from './types';\n\ninterface BaseTableProps {\n  style?: React.CSSProperties;\n  columns: TableColumns[];\n}\n\nconst BaseTable: React.FC<BaseTableProps> = ({ style, columns }) => {\n  const [pageIndex, setPageIndex] = useState(1);\n\n  const [prevData, setPrevData] = useState({\n    data: [],\n    total: 0,\n  });\n\n  const store = useStore();\n\n  let { formatData, updateStore, query, key, searchValues } = store as any;\n\n  // 表单默认值\n  const defaultValues = useMemo(() => {\n    const defaultSearchValues: Fields = {};\n    columns.forEach((col) => {\n      if (col?.props?.initialValue) {\n        const name = col.key || col.props.key;\n        defaultSearchValues[name] = col.props.initialValue;\n      }\n    });\n\n    return defaultSearchValues;\n  }, [JSON.stringify(columns)]);\n\n  // 是否首次调取数据\n  const isFirstMountRef = useRef(false);\n  // 格式化接口查询参数\n  const formatQuery = useCallback(() => {\n    if (query) {\n      return query(\n        pageIndex,\n        isFirstMountRef.current === false ? defaultValues : searchValues,\n      );\n    } else {\n      // 默认传参\n      return {\n        page: 1,\n        pageSize: 10,\n      };\n    }\n  }, [pageIndex, JSON.stringify(defaultValues), JSON.stringify(searchValues)]);\n\n  const pageSize = formatQuery().pageSize || 10;\n\n  const { data, isValidating } = useSWR(\n    [key, { method: 'POST', body: formatQuery() }],\n    request,\n    {\n      // revalidateOnMount: false,\n      revalidateOnFocus: false,\n    },\n  );\n\n  // 查询\n  const onSearch = useCallback(async () => {\n    setPageIndex(1);\n  }, []);\n  // 分页\n  const onPageChange = useCallback((page) => {\n    setPageIndex(page);\n  }, []);\n\n  useEffect(() => {\n    // 获取表单默认值\n    const defaultSearchValues: Fields = {};\n    columns.forEach((col) => {\n      if (col?.props?.initialValue) {\n        const name = col.key || col.props.key;\n        defaultSearchValues[name] = col.props.initialValue;\n      }\n    });\n    const stores: any = {\n      data: data?.data,\n      total: data?.total,\n      loading: !data || isValidating,\n      onSearch,\n    };\n\n    if (!isFirstMountRef.current) {\n      isFirstMountRef.current = true;\n      // 默认表单值\n\n      stores.searchValues = defaultSearchValues;\n    }\n\n    updateStore(stores);\n\n    // 上一次请求数据\n    if (data) {\n      setPrevData(data);\n    }\n  }, [JSON.stringify(data), isValidating, onSearch, JSON.stringify(columns)]);\n\n  return (\n    <Table\n      columns={columns}\n      data={\n        formatData && data\n          ? formatData(data).data\n          : data?.data || prevData?.data\n      }\n      // style={{overflowX: 'scroll'}}\n      footer={\n        <Pagination\n          current={pageIndex}\n          pageSize={pageSize}\n          total={\n            formatData && data\n              ? formatData(data).total\n              : data?.total || prevData?.total\n          }\n          divider\n          onChange={(page) => {\n            onPageChange(page);\n          }}\n        />\n      }\n    />\n  );\n};\n\nexport default BaseTable;\n","import React from 'react';\nimport { Select } from 'uiw';\n\ninterface FormSelectProps {\n  option?: HTMLOptionElement[];\n}\n\nconst FormSelect: React.FC<FormSelectProps> = ({ option, ...others }) => {\n  return (\n    <Select {...others}>\n      <Select.Option value=\"\">请选择</Select.Option>\n      {option &&\n        option.map((opt) => (\n          <Select.Option key={opt.value} value={opt.value}>\n            {opt.label}\n          </Select.Option>\n        ))}\n    </Select>\n  );\n};\n\nexport default FormSelect;\n","import React from 'react';\nimport {Radio, RadioGroup } from 'uiw';\n\ninterface FormSelectProps {\n  option?: HTMLOptionElement[];\n}\n\nconst FormRadio: React.FC<FormSelectProps> = ({ option, ...others }) => {\n  return (\n    <RadioGroup {...others}>\n      {option &&\n        option.map((opt) => (\n          <Radio key={opt.value} value={opt.value}>\n            {opt.label}\n          </Radio>\n        ))}\n    </RadioGroup>\n  );\n};\n\nexport default FormRadio;\n","import React, { useMemo } from 'react';\nimport {\n  Button,\n  Input,\n  Form,\n  Row,\n  Col,\n  Checkbox,\n  Switch,\n  Textarea,\n  DateInput,\n  TimePicker,\n  MonthPicker,\n  FormSubmitProps,\n  SearchSelect,\n} from 'uiw';\nimport Select from './widgets/Select';\nimport FormRadio from './widgets/Radio';\nimport { useStore } from './hooks';\nimport { BaseFormProps, Fields } from './types'\n\n\nconst widgets = {\n  input: Input,\n  radio: FormRadio,\n  checkbox: Checkbox,\n  switch: Switch,\n  select: Select,\n  searchSelect: SearchSelect,\n  textarea: Textarea,\n  dateInput: DateInput,\n  timePicker: TimePicker,\n  monthPicker: MonthPicker,\n};\n\nconst BaseForm: React.FC<BaseFormProps> = (props) => {\n  const store = useStore();\n\n  let { updateStore, reset, onSearch } = store as any;\n\n  const { columns } = props;\n  // 获取表单配置\n  const getFormFields = useMemo(() => {\n    const fields: Fields = {};\n    columns.forEach((col) => {\n      if (col.props && Object.keys(col.props).length > 0) {\n        const { widgetProps, key, widget, label, initialValue, ...otherProps } =\n          col.props;\n        const name = key || col.key;\n        const Widget = widgets[widget];\n        fields[name] = {\n          label: label || col.title,\n          children: <Widget {...widgetProps} />,\n          ...otherProps,\n          initialValue,\n        };\n      }\n    });\n\n    return fields;\n  }, [JSON.stringify(columns)]);\n\n  // 查询\n  const onFormSearch = ({ initial, current }: FormSubmitProps) => {\n    updateStore({\n      searchValues: {\n        ...initial,\n        ...current,\n      },\n    });\n    onSearch(current);\n  };\n\n  // 重置\n\n  // const onReset = (resetForm: () => void) => {\n  //   resetForm();\n  // };\n  const itemsLength = Object.keys(getFormFields).length;\n  const emptyLength = 4 - itemsLength % 5\n  return (\n    <Form\n      style={{ background: '#fff', paddingBottom: 10, marginBottom: 14 }}\n      resetOnSubmit={false}\n      onSubmit={({ initial, current }) => {\n        onFormSearch({ initial, current });\n      }}\n      onSubmitError={(error) => {\n        if (error.filed) {\n          return { ...error.filed };\n        }\n        return null;\n      }}\n      fields={getFormFields}\n    >\n      {({ fields, state, canSubmit, resetForm }) => {\n        return (\n          <div>\n            <Row gutter={12}>\n              {Object.keys(fields).map((key) => (\n                <Col key={key} fixed style={{ width: '20%' }}>\n                  {fields[key]}\n                </Col>\n              ))}\n              {Array(emptyLength).fill('').map((value, index) => (\n                <Col key={index} fixed style={{ width: '20%' }} />\n              ))}\n              <Col align=\"middle\">\n                <Button type=\"primary\" htmlType=\"submit\">\n                  查询\n                </Button>\n                {/* <Button type=\"warning\" onClick={() => onReset(resetForm)}>\n           重置表单\n         </Button> */}\n              </Col>\n            </Row>\n          </div>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default BaseForm;\n","import React, { useState, useMemo } from 'react';\nimport { Button, Input, Form, ButtonProps, Row, Col, TableColumns } from 'uiw';\nimport Skeleton from '../Skeleton';\nimport Table from './BaseTable';\nimport BaseForm from './BaseForm';\nimport { StoreCtx } from './hooks';\nimport { ProtableProps } from './types'\n\n// interface BtnItem extends ButtonProps{\n//   label: React.ReactNode;\n// };\n\nconst ProTabel: React.FC<ProtableProps> = ({ table, columns, btns = [] }) => {\n  const {\n    key,\n    data,\n    reset,\n    refersh,\n    updateStore,\n    formatData,\n    query,\n    searchValues,\n    loading,\n    onSearch,\n  } = table;\n\n  const store = useMemo(\n    () => ({\n      data: [],\n      reset,\n      refersh,\n      key,\n      updateStore,\n      formatData,\n      query,\n      searchValues,\n      onSearch,\n    }),\n    [\n      JSON.stringify(data),\n      reset,\n      refersh,\n      key,\n      updateStore,\n      formatData,\n      query,\n      JSON.stringify(searchValues),\n      onSearch,\n    ],\n  );\n\n  return (\n    <StoreCtx.Provider value={store}>\n      <Skeleton loading={loading}>\n        {/* 表单查询区域 */}\n        <BaseForm columns={columns} />\n        {/* 操作区域 */}\n        {btns.length > 0 && (\n          <div style={{  background: '#fff', padding: 10 }}>\n            {btns.map((btn: any, idx) => (\n              <Button key={idx.toString()} style={{ marginRight: 5 }} {...btn}>\n                {btn.label}\n              </Button>\n            ))}\n          </div>\n        )}\n\n        {/* 列表组件 */}\n        <Table columns={columns} />\n      </Skeleton>\n    </StoreCtx.Provider>\n  );\n};\n\nexport default ProTabel;\n","import { useState } from 'react'\nimport { Params, useTableData, stateParams } from './types'\n\n\nconst useTable = (key: string, params: Params = {}): useTableData => {\n\n  const { formatData, query } = params\n\n\n  const [state, setState] = useState<any>({\n     // 总页数\n    total: 1,\n    // 当前table数据源\n    data: [],\n    // 选中的行\n    selectChecked: [],\n    selectCheckedRows: [],\n    // 表单值\n    searchValues: {},\n    // 加载状态\n    loading: false,\n  });\n  // 更新store\n  const updateStore = (datas: stateParams) => {\n    setState({\n      ...state,\n      ...datas,\n    })\n  }\n\n  // 重置\n  const reset = () => {\n\n  }\n  // 刷新当前页数据\n  const refersh = () => {\n\n  }\n  // 点击查询\n  const onSearch = () => {\n\n  }\n\n  return {\n    key,\n    // 重置\n    reset,\n    // 刷新当前页数据\n    refersh,\n    // 点击查询\n    onSearch,\n    formatData,\n    query,\n    updateStore,\n    ...state,\n  }\n}\n\n\nexport default useTable","import React, { memo } from 'react';\nimport { Drawer, Button, DrawerProps, Row, Col } from 'uiw';\n\n/**\n * ProDrawer 组件继承于https://uiwjs.github.io/#/components/drawer\n * @param {boolean} visible 显示隐藏\n * @param {string} title 标题\n * @param {()=>void} onClose 关闭事件\n * @param {number} width Drawer宽\n * @param {Array<{label?:string,onPress?:()=>void,show?:boolean,loading?:boolean}>} buttons 按钮集合(label:\"文本\",onPress:点击事件,show:是否展示)\n * @param {React.ReactNode} children\n * @returns\n */\n\ninterface ButtonItemsProps {\n  label?: string;\n  onPress?: () => void;\n  show?: boolean;\n  size?: 'large' | 'default' | 'small';\n  type?: 'primary' | 'success' | 'warning' | 'danger' | 'light' | 'dark' | 'link';\n  loading?: boolean;\n  width?: number\n}\n\ninterface ProDrawerProps extends DrawerProps {\n  visible: boolean;\n  title?: string;\n  onClose?: any;\n  width?: number;\n  buttons?: Array<ButtonItemsProps>;\n  children?: React.ReactNode\n}\nfunction ProDrawer(props: ProDrawerProps) {\n  const { visible, title = '', onClose = null, width = 800, buttons = [], children, ...others } = props\n  return (\n    <Drawer\n      title={title}\n      isOpen={visible}\n      onClose={onClose && onClose}\n      size={width}\n      bodyStyle={{ padding: '0 10px 45px 10px' }}\n      {...others}\n      footer={\n        buttons.map(\n          ({ label = '', onPress, show = true, loading, type = \"primary\", width = 80, size = \"default\" }, idx) =>\n            show && (\n              <Button\n                style={{ width: width }}\n                key={idx}\n                type={type}\n                size={size}\n                onClick={onPress && onPress}\n                loading={loading}\n              >\n                {label}\n              </Button>\n            )\n        )\n      }\n    >\n      {children}\n    </Drawer>\n  );\n}\n\nexport default memo(ProDrawer);\n","import React from 'react';\nimport { Form, Button } from 'uiw';\nimport { ProFormProps } from './'\nimport './style/form-item.less';\n\nfunction FormDom({\n  getFormFields,\n  onSubmit,\n  onChange,\n  onSubmitError,\n  btns = [],\n  span = 3,\n}: ProFormProps & { getFormFields: any }) {\n  return (\n    <Form\n      style={{ background: '#fff', paddingBottom: 10, marginBottom: 14 }}\n      resetOnSubmit={false}\n      onSubmit={({ initial, current }) => onSubmit?.(initial, current)}\n      onChange={({ initial, current }) => onChange?.(initial, current)}\n      onSubmitError={(error) => {\n        if (onSubmitError) {\n          onSubmitError(error)\n        } else {\n          if (error.filed) {\n            return { ...error.filed };\n          }\n          return null;\n        }\n      }}\n      fields={getFormFields}\n    >\n      {({ fields, state, canSubmit, resetForm }) => {\n        return (\n          <React.Fragment>\n            <div className=\"w-form-grid\" style={{ gridTemplateColumns: `repeat(${span}, 1fr)` }}>\n              {Object.keys(fields).map((key) => (\n                <div key={key} style={{ flex: 1 }}>\n                  {fields[key]}\n                </div>\n              ))}\n            </div>\n            <div className=\"w-form-item-center\">\n              {\n                btns.map(({ label, btnType, onPress, show = true, size, type = 'primary', loading, width = 80 }, index) => {\n                  const btnProps = {\n                    loading: loading,\n                    style: { width: width },\n                    type: type,\n                    size: size,\n                  }\n                  if (!show) return null\n                  if (btnType === 'submit') {\n                    return <Button key={index} {...btnProps} disabled={!canSubmit()} htmlType=\"submit\">{label}</Button>\n                  }\n                  if (btnType === 'reset') {\n                    return (\n                      <Button key={index} {...btnProps} onClick={() => { resetForm; onPress?.() }}>{label}</Button>\n                    )\n                  }\n                  return <Button key={index} {...btnProps} onClick={() => onPress?.()}>{label}</Button>\n                })\n              }\n            </div>\n          </React.Fragment>\n        );\n      }}\n    </Form>\n  )\n}\n\n\nexport default FormDom","import React, { useMemo } from 'react'\nimport {\n  Input,\n  Checkbox,\n  Switch,\n  Textarea,\n  DateInput,\n  TimePicker,\n  MonthPicker,\n  SearchSelect,\n  Collapse,\n  Card\n} from 'uiw';\nimport Radio from '../ProTable/widgets/Radio'\nimport Select from '../ProTable/widgets/Select'\nimport FormDom from './formdom'\nimport './style/form-item.less';\n\nexport type Fields = {\n  [key: string]: any;\n};\n\nexport interface BtnProps {\n  label?: string;\n  btnType: 'submit' | 'reset' | 'other';\n  onPress?: () => void;\n  show?: boolean;\n  size?: 'large' | 'default' | 'small';\n  type?: 'primary' | 'success' | 'warning' | 'danger' | 'light' | 'dark' | 'link';\n  loading?: boolean;\n  width?: number\n}\n\nexport interface FormItemsOptionsProps {\n  label: string;\n  value: string | number;\n  disabled?: boolean;\n}\n\nexport interface FormItemsProps {\n  /** 表单元素标题 */\n  label?: string;\n  /** 表单元素字段名称 */\n  key: string;\n  /** 表单元素类型 */\n  widget: 'input' | 'input'\n  | 'radio'\n  | 'checkbox'\n  | 'switch'\n  | 'select'\n  | 'textarea'\n  | 'dateInput'\n  | 'timePicker'\n  | 'searchSelect'\n  | 'monthPicker';\n  /** 表单元素值，可以是默认值 */\n  initialValue?: any | any[];\n  /** 数据化选项内容, type为 radio、checkbox、select 生效 */\n  option?: FormItemsOptionsProps[];\n  widgetProps?: any;\n  /** 是否显示 */\n  hide?: boolean;\n}\n\nexport interface ProFormProps {\n  formDatas?: FormItemsProps[];\n  span?: number;\n  onSubmit?: (initial: Record<string, any>, current: Record<string, any>) => void;\n  onChange?: (initial: Record<string, any>, current: Record<string, any>) => void;\n  onSubmitError?: (error: any) => void;\n  btns?: BtnProps[]\n  title?: any;\n  formType?: 'collapse' | 'card';\n}\n\nconst widgetsList: any = {\n  input: Input,\n  radio: Radio,\n  checkbox: Checkbox,\n  switch: Switch,\n  select: Select,\n  searchSelect: SearchSelect,\n  textarea: Textarea,\n  dateInput: DateInput,\n  timePicker: TimePicker,\n  monthPicker: MonthPicker,\n};\n\nfunction ProForm(props: ProFormProps) {\n\n  const { formDatas = [], title = \"\", formType = 'card' } = props\n\n  // 获取表单配置\n  const getFormFields = useMemo(() => {\n    const fields: Fields = {};\n    formDatas.forEach((col) => {\n      if (col) {\n        const { widgetProps, key, widget, label, initialValue, ...otherProps } =\n          col;\n        const name = key;\n        const Widget = widgetsList[widget];\n        fields[name] = {\n          label: label,\n          children: <Widget {...widgetProps} />,\n          ...otherProps,\n          initialValue,\n        };\n      }\n    });\n    return fields;\n  }, [formDatas]);\n\n  // 判断form表单类型\n  const renderForm = useMemo(() => {\n    const formDomProps = { ...props, getFormFields }\n    if (formType === 'collapse') {\n      return (\n        <Collapse activeKey={['1']}>\n          <Collapse.Panel header={title} key={'1'}>\n            <FormDom {...formDomProps} />\n          </Collapse.Panel>\n        </Collapse>\n      )\n    }\n    if (formType === 'card') {\n      return (\n        <Card title={title}><FormDom {...formDomProps} /></Card>\n      )\n    }\n    return (\n      <React.Fragment>\n        {title && <h3>{title}</h3>}\n        <FormDom {...formDomProps} />\n      </React.Fragment>\n    )\n  }, [formType, formDatas, title])\n\n  return (\n    <div style={{ flex: 1 }}>\n      {renderForm}\n    </div>\n  )\n}\n\nexport default ProForm"],"names":["loading","style","display","bgColor","children","StoreCtx","createContext","useStore","useContext","columns","useState","data","total","store","searchValues","defaultValues","useMemo","defaultSearchValues","col","name","JSON","isFirstMountRef","useRef","formatQuery","useCallback","query","page","pageSize","pageIndex","useSWR","key","method","body","revalidateOnFocus","isValidating","onSearch","setPageIndex","onPageChange","useEffect","stores","updateStore","setPrevData","formatData","prevData","footer","current","divider","onChange","option","others","value","opt","label","widgets","input","radio","checkbox","switch","select","searchSelect","textarea","dateInput","timePicker","monthPicker","MonthPicker","props","getFormFields","fields","Object","initialValue","Widget","emptyLength","background","paddingBottom","marginBottom","resetOnSubmit","onSubmit","onFormSearch","initial","onSubmitError","error","resetForm","gutter","fixed","width","Array","align","type","htmlType","btns","reset","refersh","Provider","padding","marginRight","btn","idx","params","selectChecked","selectCheckedRows","datas","setState","ProDrawer","title","onClose","buttons","isOpen","size","bodyStyle","show","onClick","onPress","memo","span","className","gridTemplateColumns","flex","btnProps","btnType","disabled","canSubmit","widgetsList","formDatas","formType","renderForm","formDomProps","activeKey","header"],"sourceRoot":""}